
exercise_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055cc  080055cc  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  080055cc  080055cc  000065cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d4  080055d4  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d4  080055d4  000065d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055d8  080055d8  000065d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080055dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be0  20000014  080055f0  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bf4  080055f0  00007bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e12  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ede  00000000  00000000  00019e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0001cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ddb  00000000  00000000  0001df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d4e  00000000  00000000  0001ed13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000135a6  00000000  00000000  00021a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cfb  00000000  00000000  00035007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbd02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b40  00000000  00000000  000bbd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c0888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800548c 	.word	0x0800548c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	0800548c 	.word	0x0800548c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	StartFlag = 1;
 8000504:	4b1e      	ldr	r3, [pc, #120]	@ (8000580 <main+0x80>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
	GreenFlag = 1;
 800050a:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <main+0x84>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
	RedFlag = 1;
 8000510:	4b1d      	ldr	r3, [pc, #116]	@ (8000588 <main+0x88>)
 8000512:	2201      	movs	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fabb 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f853 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8af 	bl	8000680 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000522:	f001 fca9 	bl	8001e78 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CriticalResourceSemaphore */
  CriticalResourceSemaphoreHandle = osSemaphoreNew(1, 1, &CriticalResourceSemaphore_attributes);
 8000526:	4a19      	ldr	r2, [pc, #100]	@ (800058c <main+0x8c>)
 8000528:	2101      	movs	r1, #1
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fd9b 	bl	8002066 <osSemaphoreNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <main+0x90>)
 8000534:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000536:	4a17      	ldr	r2, [pc, #92]	@ (8000594 <main+0x94>)
 8000538:	2100      	movs	r1, #0
 800053a:	4817      	ldr	r0, [pc, #92]	@ (8000598 <main+0x98>)
 800053c:	f001 fce6 	bl	8001f0c <osThreadNew>
 8000540:	4603      	mov	r3, r0
 8000542:	4a16      	ldr	r2, [pc, #88]	@ (800059c <main+0x9c>)
 8000544:	6013      	str	r3, [r2, #0]

  /* creation of GreenLedFlashin */
  GreenLedFlashinHandle = osThreadNew(GreenLedTask, NULL, &GreenLedFlashin_attributes);
 8000546:	4a16      	ldr	r2, [pc, #88]	@ (80005a0 <main+0xa0>)
 8000548:	2100      	movs	r1, #0
 800054a:	4816      	ldr	r0, [pc, #88]	@ (80005a4 <main+0xa4>)
 800054c:	f001 fcde 	bl	8001f0c <osThreadNew>
 8000550:	4603      	mov	r3, r0
 8000552:	4a15      	ldr	r2, [pc, #84]	@ (80005a8 <main+0xa8>)
 8000554:	6013      	str	r3, [r2, #0]

  /* creation of RedLedFlashing */
  RedLedFlashingHandle = osThreadNew(RedLedTask, NULL, &RedLedFlashing_attributes);
 8000556:	4a15      	ldr	r2, [pc, #84]	@ (80005ac <main+0xac>)
 8000558:	2100      	movs	r1, #0
 800055a:	4815      	ldr	r0, [pc, #84]	@ (80005b0 <main+0xb0>)
 800055c:	f001 fcd6 	bl	8001f0c <osThreadNew>
 8000560:	4603      	mov	r3, r0
 8000562:	4a14      	ldr	r2, [pc, #80]	@ (80005b4 <main+0xb4>)
 8000564:	6013      	str	r3, [r2, #0]

  /* creation of OrangeLedFlashi */
  OrangeLedFlashiHandle = osThreadNew(OrangeLed, NULL, &OrangeLedFlashi_attributes);
 8000566:	4a14      	ldr	r2, [pc, #80]	@ (80005b8 <main+0xb8>)
 8000568:	2100      	movs	r1, #0
 800056a:	4814      	ldr	r0, [pc, #80]	@ (80005bc <main+0xbc>)
 800056c:	f001 fcce 	bl	8001f0c <osThreadNew>
 8000570:	4603      	mov	r3, r0
 8000572:	4a13      	ldr	r2, [pc, #76]	@ (80005c0 <main+0xc0>)
 8000574:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000576:	f001 fca3 	bl	8001ec0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057a:	bf00      	nop
 800057c:	e7fd      	b.n	800057a <main+0x7a>
 800057e:	bf00      	nop
 8000580:	20000044 	.word	0x20000044
 8000584:	20000046 	.word	0x20000046
 8000588:	20000045 	.word	0x20000045
 800058c:	080055a4 	.word	0x080055a4
 8000590:	20000040 	.word	0x20000040
 8000594:	08005514 	.word	0x08005514
 8000598:	08000751 	.word	0x08000751
 800059c:	20000030 	.word	0x20000030
 80005a0:	08005538 	.word	0x08005538
 80005a4:	08000761 	.word	0x08000761
 80005a8:	20000034 	.word	0x20000034
 80005ac:	0800555c 	.word	0x0800555c
 80005b0:	080007d1 	.word	0x080007d1
 80005b4:	20000038 	.word	0x20000038
 80005b8:	08005580 	.word	0x08005580
 80005bc:	08000841 	.word	0x08000841
 80005c0:	2000003c 	.word	0x2000003c

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2234      	movs	r2, #52	@ 0x34
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 ff20 	bl	8005418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <SystemClock_Config+0xb4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <SystemClock_Config+0xb4>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <SystemClock_Config+0xb4>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <SystemClock_Config+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <SystemClock_Config+0xb8>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <SystemClock_Config+0xb8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4618      	mov	r0, r3
 8000636:	f000 ff19 	bl	800146c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000640:	f000 f920 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fd05 	bl	8001070 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800066c:	f000 f90a 	bl	8000884 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	@ 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <MX_GPIO_Init+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <MX_GPIO_Init+0x80>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <MX_GPIO_Init+0x80>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_GPIO_Init+0x80>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a11      	ldr	r2, [pc, #68]	@ (8000700 <MX_GPIO_Init+0x80>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_GPIO_Init+0x80>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin|led3_Pin|led4_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80006d4:	480b      	ldr	r0, [pc, #44]	@ (8000704 <MX_GPIO_Init+0x84>)
 80006d6:	f000 fc97 	bl	8001008 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin;
 80006da:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80006de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_GPIO_Init+0x84>)
 80006f4:	f000 fb14 	bl	8000d20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40020000 	.word	0x40020000

08000708 <AccessSharedData>:

/* USER CODE BEGIN 4 */
void AccessSharedData(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	//osSemaphoreAcquire(CriticalResourceSemaphoreHandle, osWaitForever);
    if (StartFlag == 1) {
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <AccessSharedData+0x40>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d103      	bne.n	800071c <AccessSharedData+0x14>
        // Set Start flag to Down to indicate resource is in use
        StartFlag = 0;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <AccessSharedData+0x40>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e005      	b.n	8000728 <AccessSharedData+0x20>
    } else {
        // Resource contention: Turn on Blue LED
        HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, HIGH);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000722:	480a      	ldr	r0, [pc, #40]	@ (800074c <AccessSharedData+0x44>)
 8000724:	f000 fc70 	bl	8001008 <HAL_GPIO_WritePin>
    }

    // Simulate read/write operations with a delay of 500 milliseconds
//    SimulateReadWriteOperation();
    HAL_Delay(500);
 8000728:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800072c:	f000 f9f2 	bl	8000b14 <HAL_Delay>

    // Set Start flag back to Up to indicate resource is free
    StartFlag = 1;
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <AccessSharedData+0x40>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]

    // Turn off Blue LED (if it was turned on during contention)
    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, LOW);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <AccessSharedData+0x44>)
 800073e:	f000 fc63 	bl	8001008 <HAL_GPIO_WritePin>

    //osSemaphoreRelease(CriticalResourceSemaphoreHandle);
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000044 	.word	0x20000044
 800074c:	40020000 	.word	0x40020000

08000750 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f001 fc69 	bl	8002030 <osDelay>
 800075e:	e7fb      	b.n	8000758 <StartDefaultTask+0x8>

08000760 <GreenLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenLedTask */
void GreenLedTask(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenLedTask */
  /* Infinite loop */
  for(;;)
  {
		GreenFlag = 1;
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <GreenLedTask+0x60>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
		// Turn on Green LED
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, HIGH);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000774:	4813      	ldr	r0, [pc, #76]	@ (80007c4 <GreenLedTask+0x64>)
 8000776:	f000 fc47 	bl	8001008 <HAL_GPIO_WritePin>

		// Enter critical section
		osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 800077a:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <GreenLedTask+0x68>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a13      	ldr	r2, [pc, #76]	@ (80007cc <GreenLedTask+0x6c>)
 8000780:	8812      	ldrh	r2, [r2, #0]
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fcf7 	bl	8002178 <osSemaphoreAcquire>
		AccessSharedData();
 800078a:	f7ff ffbd 	bl	8000708 <AccessSharedData>
		osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <GreenLedTask+0x68>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fd42 	bl	800221c <osSemaphoreRelease>

		// Turn off Green LED
		osDelay(400);
 8000798:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800079c:	f001 fc48 	bl	8002030 <osDelay>
		HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, LOW);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007a6:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <GreenLedTask+0x64>)
 80007a8:	f000 fc2e 	bl	8001008 <HAL_GPIO_WritePin>

		GreenFlag = 0;
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <GreenLedTask+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
		// Delay for 500 milliseconds
		osDelay(400);
 80007b2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007b6:	f001 fc3b 	bl	8002030 <osDelay>
		GreenFlag = 1;
 80007ba:	bf00      	nop
 80007bc:	e7d4      	b.n	8000768 <GreenLedTask+0x8>
 80007be:	bf00      	nop
 80007c0:	20000046 	.word	0x20000046
 80007c4:	40020000 	.word	0x40020000
 80007c8:	20000040 	.word	0x20000040
 80007cc:	20000000 	.word	0x20000000

080007d0 <RedLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedLedTask */
void RedLedTask(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedLedTask */
  /* Infinite loop */
  for(;;)
  {
		RedFlag = 1;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <RedLedTask+0x60>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
		// Turn on Red LED
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, HIGH);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e4:	4813      	ldr	r0, [pc, #76]	@ (8000834 <RedLedTask+0x64>)
 80007e6:	f000 fc0f 	bl	8001008 <HAL_GPIO_WritePin>

		// Enter critical section
		osSemaphoreAcquire(CriticalResourceSemaphoreHandle,WaitTimeMilliseconds);
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <RedLedTask+0x68>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a13      	ldr	r2, [pc, #76]	@ (800083c <RedLedTask+0x6c>)
 80007f0:	8812      	ldrh	r2, [r2, #0]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fcbf 	bl	8002178 <osSemaphoreAcquire>
		AccessSharedData();
 80007fa:	f7ff ff85 	bl	8000708 <AccessSharedData>
		osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <RedLedTask+0x68>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fd0a 	bl	800221c <osSemaphoreRelease>

		// Turn off Red LED
		osDelay(450);
 8000808:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800080c:	f001 fc10 	bl	8002030 <osDelay>
		HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, LOW);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000816:	4807      	ldr	r0, [pc, #28]	@ (8000834 <RedLedTask+0x64>)
 8000818:	f000 fbf6 	bl	8001008 <HAL_GPIO_WritePin>

		RedFlag = 0;
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <RedLedTask+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
		// Delay for 100 milliseconds
		osDelay(450);
 8000822:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000826:	f001 fc03 	bl	8002030 <osDelay>
		RedFlag = 1;
 800082a:	bf00      	nop
 800082c:	e7d4      	b.n	80007d8 <RedLedTask+0x8>
 800082e:	bf00      	nop
 8000830:	20000045 	.word	0x20000045
 8000834:	40020000 	.word	0x40020000
 8000838:	20000040 	.word	0x20000040
 800083c:	20000000 	.word	0x20000000

08000840 <OrangeLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OrangeLed */
void OrangeLed(void *argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeLed */
  /* Infinite loop */
 for(;;)
  {
	  HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 8000848:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <OrangeLed+0x1c>)
 800084e:	f000 fbf4 	bl	800103a <HAL_GPIO_TogglePin>
	  osDelay(50);
 8000852:	2032      	movs	r0, #50	@ 0x32
 8000854:	f001 fbec 	bl	8002030 <osDelay>
	  HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 8000858:	bf00      	nop
 800085a:	e7f5      	b.n	8000848 <OrangeLed+0x8>
 800085c:	40020000 	.word	0x40020000

08000860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d101      	bne.n	8000876 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000872:	f000 f92f 	bl	8000ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010000 	.word	0x40010000

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a11      	ldr	r2, [pc, #68]	@ (80008e4 <HAL_MspInit+0x54>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <HAL_MspInit+0x54>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <HAL_MspInit+0x54>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_MspInit+0x54>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	210f      	movs	r1, #15
 80008d2:	f06f 0001 	mvn.w	r0, #1
 80008d6:	f000 f9f9 	bl	8000ccc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	@ 0x30
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	4b2e      	ldr	r3, [pc, #184]	@ (80009b8 <HAL_InitTick+0xd0>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000900:	4a2d      	ldr	r2, [pc, #180]	@ (80009b8 <HAL_InitTick+0xd0>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6453      	str	r3, [r2, #68]	@ 0x44
 8000908:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <HAL_InitTick+0xd0>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000914:	f107 020c 	add.w	r2, r7, #12
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fd72 	bl	8001408 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000924:	f000 fd5c 	bl	80013e0 <HAL_RCC_GetPCLK2Freq>
 8000928:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800092c:	4a23      	ldr	r2, [pc, #140]	@ (80009bc <HAL_InitTick+0xd4>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9b      	lsrs	r3, r3, #18
 8000934:	3b01      	subs	r3, #1
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <HAL_InitTick+0xd8>)
 800093a:	4a22      	ldr	r2, [pc, #136]	@ (80009c4 <HAL_InitTick+0xdc>)
 800093c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <HAL_InitTick+0xd8>)
 8000940:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000944:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000946:	4a1e      	ldr	r2, [pc, #120]	@ (80009c0 <HAL_InitTick+0xd8>)
 8000948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <HAL_InitTick+0xd8>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <HAL_InitTick+0xd8>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <HAL_InitTick+0xd8>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800095e:	4818      	ldr	r0, [pc, #96]	@ (80009c0 <HAL_InitTick+0xd8>)
 8000960:	f001 f808 	bl	8001974 <HAL_TIM_Base_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800096a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800096e:	2b00      	cmp	r3, #0
 8000970:	d11b      	bne.n	80009aa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000972:	4813      	ldr	r0, [pc, #76]	@ (80009c0 <HAL_InitTick+0xd8>)
 8000974:	f001 f858 	bl	8001a28 <HAL_TIM_Base_Start_IT>
 8000978:	4603      	mov	r3, r0
 800097a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800097e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000982:	2b00      	cmp	r3, #0
 8000984:	d111      	bne.n	80009aa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000986:	2019      	movs	r0, #25
 8000988:	f000 f9bc 	bl	8000d04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d808      	bhi.n	80009a4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000992:	2200      	movs	r2, #0
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	2019      	movs	r0, #25
 8000998:	f000 f998 	bl	8000ccc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099c:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <HAL_InitTick+0xe0>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
 80009a2:	e002      	b.n	80009aa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3730      	adds	r7, #48	@ 0x30
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	20000048 	.word	0x20000048
 80009c4:	40010000 	.word	0x40010000
 80009c8:	20000008 	.word	0x20000008

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <MemManage_Handler+0x4>

080009e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <TIM1_UP_IRQHandler+0x10>)
 8000a0a:	f001 f85b 	bl	8001ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000048 	.word	0x20000048

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	@ (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a40:	f7ff ffea 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	@ (8000a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	@ (8000a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	@ (8000a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f004 fcdd 	bl	8005428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fd47 	bl	8000500 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a74:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a80:	080055dc 	.word	0x080055dc
  ldr r2, =_sbss
 8000a84:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a88:	20001bf4 	.word	0x20001bf4

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad0 <HAL_Init+0x40>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <HAL_Init+0x40>)
 8000aa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	@ (8000ad0 <HAL_Init+0x40>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f8fc 	bl	8000cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f7ff ff12 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fee4 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023c00 	.word	0x40023c00

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000000c 	.word	0x2000000c
 8000af8:	20000090 	.word	0x20000090

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	@ (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000090 	.word	0x20000090

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff ffee 	bl	8000afc <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffde 	bl	8000afc <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000000c 	.word	0x2000000c

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	@ (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	@ (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	@ (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	@ 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	@ 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff4c 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cde:	f7ff ff61 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000ce2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	68b9      	ldr	r1, [r7, #8]
 8000ce8:	6978      	ldr	r0, [r7, #20]
 8000cea:	f7ff ffb1 	bl	8000c50 <NVIC_EncodePriority>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff80 	bl	8000bfc <__NVIC_SetPriority>
}
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff54 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	e14d      	b.n	8000fd8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 813c 	bne.w	8000fd2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d005      	beq.n	8000d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d130      	bne.n	8000dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d017      	beq.n	8000e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 8096 	beq.w	8000fd2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b51      	ldr	r3, [pc, #324]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	4a50      	ldr	r2, [pc, #320]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb6:	4b4e      	ldr	r3, [pc, #312]	@ (8000ff0 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8000ff4 <HAL_GPIO_Init+0x2d4>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a43      	ldr	r2, [pc, #268]	@ (8000ff8 <HAL_GPIO_Init+0x2d8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x1ea>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a42      	ldr	r2, [pc, #264]	@ (8000ffc <HAL_GPIO_Init+0x2dc>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x1e6>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a41      	ldr	r2, [pc, #260]	@ (8001000 <HAL_GPIO_Init+0x2e0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x1e2>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e004      	b.n	8000f0c <HAL_GPIO_Init+0x1ec>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_Init+0x1ec>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x1ec>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	f002 0203 	and.w	r2, r2, #3
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	4093      	lsls	r3, r2
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f1c:	4935      	ldr	r1, [pc, #212]	@ (8000ff4 <HAL_GPIO_Init+0x2d4>)
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3302      	adds	r3, #2
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2a:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <HAL_GPIO_Init+0x2e4>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001004 <HAL_GPIO_Init+0x2e4>)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f54:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <HAL_GPIO_Init+0x2e4>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f78:	4a22      	ldr	r2, [pc, #136]	@ (8001004 <HAL_GPIO_Init+0x2e4>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <HAL_GPIO_Init+0x2e4>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa2:	4a18      	ldr	r2, [pc, #96]	@ (8001004 <HAL_GPIO_Init+0x2e4>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <HAL_GPIO_Init+0x2e4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <HAL_GPIO_Init+0x2e4>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	2b0f      	cmp	r3, #15
 8000fdc:	f67f aeae 	bls.w	8000d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3724      	adds	r7, #36	@ 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40013800 	.word	0x40013800
 8000ff8:	40020000 	.word	0x40020000
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40020800 	.word	0x40020800
 8001004:	40013c00 	.word	0x40013c00

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001024:	e003      	b.n	800102e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	041a      	lsls	r2, r3, #16
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800103a:	b480      	push	{r7}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800104c:	887a      	ldrh	r2, [r7, #2]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4013      	ands	r3, r2
 8001052:	041a      	lsls	r2, r3, #16
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43d9      	mvns	r1, r3
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	400b      	ands	r3, r1
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e0cc      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001084:	4b68      	ldr	r3, [pc, #416]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d90c      	bls.n	80010ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001092:	4b65      	ldr	r3, [pc, #404]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800109a:	4b63      	ldr	r3, [pc, #396]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e0b8      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d020      	beq.n	80010fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010c4:	4b59      	ldr	r3, [pc, #356]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4a58      	ldr	r2, [pc, #352]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010dc:	4b53      	ldr	r3, [pc, #332]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4a52      	ldr	r2, [pc, #328]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e8:	4b50      	ldr	r3, [pc, #320]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	494d      	ldr	r1, [pc, #308]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d044      	beq.n	8001190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110e:	4b47      	ldr	r3, [pc, #284]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d119      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e07f      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d003      	beq.n	800112e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800112a:	2b03      	cmp	r3, #3
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800112e:	4b3f      	ldr	r3, [pc, #252]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d109      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e06f      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113e:	4b3b      	ldr	r3, [pc, #236]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e067      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800114e:	4b37      	ldr	r3, [pc, #220]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f023 0203 	bic.w	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4934      	ldr	r1, [pc, #208]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	4313      	orrs	r3, r2
 800115e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001160:	f7ff fccc 	bl	8000afc <HAL_GetTick>
 8001164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	e00a      	b.n	800117e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001168:	f7ff fcc8 	bl	8000afc <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e04f      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117e:	4b2b      	ldr	r3, [pc, #172]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 020c 	and.w	r2, r3, #12
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	429a      	cmp	r2, r3
 800118e:	d1eb      	bne.n	8001168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001190:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d20c      	bcs.n	80011b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <HAL_RCC_ClockConfig+0x1b8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d001      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e032      	b.n	800121e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	4916      	ldr	r1, [pc, #88]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d009      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	490e      	ldr	r1, [pc, #56]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011f6:	f000 f821 	bl	800123c <HAL_RCC_GetSysClockFreq>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	490a      	ldr	r1, [pc, #40]	@ (8001230 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	5ccb      	ldrb	r3, [r1, r3]
 800120a:	fa22 f303 	lsr.w	r3, r2, r3
 800120e:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <HAL_RCC_ClockConfig+0x1c8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fb66 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00
 800122c:	40023800 	.word	0x40023800
 8001230:	080055b4 	.word	0x080055b4
 8001234:	20000004 	.word	0x20000004
 8001238:	20000008 	.word	0x20000008

0800123c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800123c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001240:	b090      	sub	sp, #64	@ 0x40
 8001242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001254:	4b59      	ldr	r3, [pc, #356]	@ (80013bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d00d      	beq.n	800127c <HAL_RCC_GetSysClockFreq+0x40>
 8001260:	2b08      	cmp	r3, #8
 8001262:	f200 80a1 	bhi.w	80013a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <HAL_RCC_GetSysClockFreq+0x34>
 800126a:	2b04      	cmp	r3, #4
 800126c:	d003      	beq.n	8001276 <HAL_RCC_GetSysClockFreq+0x3a>
 800126e:	e09b      	b.n	80013a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001270:	4b53      	ldr	r3, [pc, #332]	@ (80013c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001272:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001274:	e09b      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001276:	4b53      	ldr	r3, [pc, #332]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001278:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800127a:	e098      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800127c:	4b4f      	ldr	r3, [pc, #316]	@ (80013bc <HAL_RCC_GetSysClockFreq+0x180>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001284:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001286:	4b4d      	ldr	r3, [pc, #308]	@ (80013bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d028      	beq.n	80012e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001292:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <HAL_RCC_GetSysClockFreq+0x180>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	099b      	lsrs	r3, r3, #6
 8001298:	2200      	movs	r2, #0
 800129a:	623b      	str	r3, [r7, #32]
 800129c:	627a      	str	r2, [r7, #36]	@ 0x24
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80012a4:	2100      	movs	r1, #0
 80012a6:	4b47      	ldr	r3, [pc, #284]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80012a8:	fb03 f201 	mul.w	r2, r3, r1
 80012ac:	2300      	movs	r3, #0
 80012ae:	fb00 f303 	mul.w	r3, r0, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	4a43      	ldr	r2, [pc, #268]	@ (80013c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80012b6:	fba0 1202 	umull	r1, r2, r0, r2
 80012ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80012bc:	460a      	mov	r2, r1
 80012be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80012c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012c2:	4413      	add	r3, r2
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c8:	2200      	movs	r2, #0
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	61fa      	str	r2, [r7, #28]
 80012ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012d6:	f7fe ff9b 	bl	8000210 <__aeabi_uldivmod>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4613      	mov	r3, r2
 80012e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012e2:	e053      	b.n	800138c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012e4:	4b35      	ldr	r3, [pc, #212]	@ (80013bc <HAL_RCC_GetSysClockFreq+0x180>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	2200      	movs	r2, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	617a      	str	r2, [r7, #20]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80012f6:	f04f 0b00 	mov.w	fp, #0
 80012fa:	4652      	mov	r2, sl
 80012fc:	465b      	mov	r3, fp
 80012fe:	f04f 0000 	mov.w	r0, #0
 8001302:	f04f 0100 	mov.w	r1, #0
 8001306:	0159      	lsls	r1, r3, #5
 8001308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800130c:	0150      	lsls	r0, r2, #5
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	ebb2 080a 	subs.w	r8, r2, sl
 8001316:	eb63 090b 	sbc.w	r9, r3, fp
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001326:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800132a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800132e:	ebb2 0408 	subs.w	r4, r2, r8
 8001332:	eb63 0509 	sbc.w	r5, r3, r9
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	00eb      	lsls	r3, r5, #3
 8001340:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001344:	00e2      	lsls	r2, r4, #3
 8001346:	4614      	mov	r4, r2
 8001348:	461d      	mov	r5, r3
 800134a:	eb14 030a 	adds.w	r3, r4, sl
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	eb45 030b 	adc.w	r3, r5, fp
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001362:	4629      	mov	r1, r5
 8001364:	028b      	lsls	r3, r1, #10
 8001366:	4621      	mov	r1, r4
 8001368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800136c:	4621      	mov	r1, r4
 800136e:	028a      	lsls	r2, r1, #10
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001376:	2200      	movs	r2, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	60fa      	str	r2, [r7, #12]
 800137c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001380:	f7fe ff46 	bl	8000210 <__aeabi_uldivmod>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4613      	mov	r3, r2
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800138c:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <HAL_RCC_GetSysClockFreq+0x180>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	3301      	adds	r3, #1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800139c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800139e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013a6:	e002      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80013aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3740      	adds	r7, #64	@ 0x40
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	00f42400 	.word	0x00f42400
 80013c4:	017d7840 	.word	0x017d7840

080013c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013cc:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <HAL_RCC_GetHCLKFreq+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013e4:	f7ff fff0 	bl	80013c8 <HAL_RCC_GetHCLKFreq>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	0b5b      	lsrs	r3, r3, #13
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	4903      	ldr	r1, [pc, #12]	@ (8001404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013f6:	5ccb      	ldrb	r3, [r1, r3]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	080055c4 	.word	0x080055c4

08001408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	220f      	movs	r2, #15
 8001416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <HAL_RCC_GetClockConfig+0x60>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0207 	and.w	r2, r3, #7
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e273      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d075      	beq.n	8001576 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800148a:	4b88      	ldr	r3, [pc, #544]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b04      	cmp	r3, #4
 8001494:	d00c      	beq.n	80014b0 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001496:	4b85      	ldr	r3, [pc, #532]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
        || \
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d112      	bne.n	80014c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a2:	4b82      	ldr	r3, [pc, #520]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014ae:	d10b      	bne.n	80014c8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	4b7e      	ldr	r3, [pc, #504]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d05b      	beq.n	8001574 <HAL_RCC_OscConfig+0x108>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d157      	bne.n	8001574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e24e      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d0:	d106      	bne.n	80014e0 <HAL_RCC_OscConfig+0x74>
 80014d2:	4b76      	ldr	r3, [pc, #472]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a75      	ldr	r2, [pc, #468]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e01d      	b.n	800151c <HAL_RCC_OscConfig+0xb0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e8:	d10c      	bne.n	8001504 <HAL_RCC_OscConfig+0x98>
 80014ea:	4b70      	ldr	r3, [pc, #448]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6f      	ldr	r2, [pc, #444]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b6d      	ldr	r3, [pc, #436]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a6c      	ldr	r2, [pc, #432]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e00b      	b.n	800151c <HAL_RCC_OscConfig+0xb0>
 8001504:	4b69      	ldr	r3, [pc, #420]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a68      	ldr	r2, [pc, #416]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 800150a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b66      	ldr	r3, [pc, #408]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a65      	ldr	r2, [pc, #404]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff faea 	bl	8000afc <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff fae6 	bl	8000afc <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b64      	cmp	r3, #100	@ 0x64
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e213      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153e:	4b5b      	ldr	r3, [pc, #364]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0xc0>
 800154a:	e014      	b.n	8001576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff fad6 	bl	8000afc <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fad2 	bl	8000afc <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	@ 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e1ff      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001566:	4b51      	ldr	r3, [pc, #324]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0xe8>
 8001572:	e000      	b.n	8001576 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d063      	beq.n	800164a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001582:	4b4a      	ldr	r3, [pc, #296]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00b      	beq.n	80015a6 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158e:	4b47      	ldr	r3, [pc, #284]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
        || \
 8001596:	2b08      	cmp	r3, #8
 8001598:	d11c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159a:	4b44      	ldr	r3, [pc, #272]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d116      	bne.n	80015d4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <HAL_RCC_OscConfig+0x152>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d001      	beq.n	80015be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e1d3      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	4b3b      	ldr	r3, [pc, #236]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4937      	ldr	r1, [pc, #220]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	e03a      	b.n	800164a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d020      	beq.n	800161e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015dc:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <HAL_RCC_OscConfig+0x244>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa8b 	bl	8000afc <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ea:	f7ff fa87 	bl	8000afc <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e1b4      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fc:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001608:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	4925      	ldr	r1, [pc, #148]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001618:	4313      	orrs	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
 800161c:	e015      	b.n	800164a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161e:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <HAL_RCC_OscConfig+0x244>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fa6a 	bl	8000afc <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff fa66 	bl	8000afc <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e193      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d036      	beq.n	80016c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d016      	beq.n	800168c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_RCC_OscConfig+0x248>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001664:	f7ff fa4a 	bl	8000afc <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff fa46 	bl	8000afc <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e173      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_RCC_OscConfig+0x240>)
 8001680:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x200>
 800168a:	e01b      	b.n	80016c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_RCC_OscConfig+0x248>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001692:	f7ff fa33 	bl	8000afc <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001698:	e00e      	b.n	80016b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169a:	f7ff fa2f 	bl	8000afc <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d907      	bls.n	80016b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e15c      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	42470000 	.word	0x42470000
 80016b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b8:	4b8a      	ldr	r3, [pc, #552]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80016ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ea      	bne.n	800169a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8097 	beq.w	8001800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d6:	4b83      	ldr	r3, [pc, #524]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10f      	bne.n	8001702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b7f      	ldr	r3, [pc, #508]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	4a7e      	ldr	r2, [pc, #504]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f2:	4b7c      	ldr	r3, [pc, #496]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001702:	4b79      	ldr	r3, [pc, #484]	@ (80018e8 <HAL_RCC_OscConfig+0x47c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170e:	4b76      	ldr	r3, [pc, #472]	@ (80018e8 <HAL_RCC_OscConfig+0x47c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a75      	ldr	r2, [pc, #468]	@ (80018e8 <HAL_RCC_OscConfig+0x47c>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff f9ef 	bl	8000afc <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff f9eb 	bl	8000afc <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e118      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b6c      	ldr	r3, [pc, #432]	@ (80018e8 <HAL_RCC_OscConfig+0x47c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x2ea>
 8001748:	4b66      	ldr	r3, [pc, #408]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a65      	ldr	r2, [pc, #404]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
 8001754:	e01c      	b.n	8001790 <HAL_RCC_OscConfig+0x324>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b05      	cmp	r3, #5
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x30c>
 800175e:	4b61      	ldr	r3, [pc, #388]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001762:	4a60      	ldr	r2, [pc, #384]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6713      	str	r3, [r2, #112]	@ 0x70
 800176a:	4b5e      	ldr	r3, [pc, #376]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800176e:	4a5d      	ldr	r2, [pc, #372]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6713      	str	r3, [r2, #112]	@ 0x70
 8001776:	e00b      	b.n	8001790 <HAL_RCC_OscConfig+0x324>
 8001778:	4b5a      	ldr	r3, [pc, #360]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177c:	4a59      	ldr	r2, [pc, #356]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6713      	str	r3, [r2, #112]	@ 0x70
 8001784:	4b57      	ldr	r3, [pc, #348]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001788:	4a56      	ldr	r2, [pc, #344]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 800178a:	f023 0304 	bic.w	r3, r3, #4
 800178e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d015      	beq.n	80017c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff f9b0 	bl	8000afc <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a0:	f7ff f9ac 	bl	8000afc <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e0d7      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b6:	4b4b      	ldr	r3, [pc, #300]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0ee      	beq.n	80017a0 <HAL_RCC_OscConfig+0x334>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff f99a 	bl	8000afc <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff f996 	bl	8000afc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0c1      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e2:	4b40      	ldr	r3, [pc, #256]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ee      	bne.n	80017cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a3a      	ldr	r2, [pc, #232]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 80ad 	beq.w	8001964 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180a:	4b36      	ldr	r3, [pc, #216]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	2b08      	cmp	r3, #8
 8001814:	d060      	beq.n	80018d8 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d145      	bne.n	80018aa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181e:	4b33      	ldr	r3, [pc, #204]	@ (80018ec <HAL_RCC_OscConfig+0x480>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff f96a 	bl	8000afc <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff f966 	bl	8000afc <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e093      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69da      	ldr	r2, [r3, #28]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	019b      	lsls	r3, r3, #6
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	3b01      	subs	r3, #1
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	061b      	lsls	r3, r3, #24
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001874:	071b      	lsls	r3, r3, #28
 8001876:	491b      	ldr	r1, [pc, #108]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_RCC_OscConfig+0x480>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff f93b 	bl	8000afc <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188a:	f7ff f937 	bl	8000afc <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e064      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189c:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x41e>
 80018a8:	e05c      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <HAL_RCC_OscConfig+0x480>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff f924 	bl	8000afc <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff f920 	bl	8000afc <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e04d      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_RCC_OscConfig+0x478>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x44c>
 80018d6:	e045      	b.n	8001964 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e040      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000
 80018ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <HAL_RCC_OscConfig+0x504>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d030      	beq.n	8001960 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d129      	bne.n	8001960 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d122      	bne.n	8001960 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001920:	4013      	ands	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001928:	4293      	cmp	r3, r2
 800192a:	d119      	bne.n	8001960 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	085b      	lsrs	r3, r3, #1
 8001938:	3b01      	subs	r3, #1
 800193a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d10f      	bne.n	8001960 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e041      	b.n	8001a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f839 	bl	8001a12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2202      	movs	r2, #2
 80019a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3304      	adds	r3, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f000 f99e 	bl	8001cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d001      	beq.n	8001a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e035      	b.n	8001aac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a16      	ldr	r2, [pc, #88]	@ (8001ab8 <HAL_TIM_Base_Start_IT+0x90>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d009      	beq.n	8001a76 <HAL_TIM_Base_Start_IT+0x4e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <HAL_TIM_Base_Start_IT+0x94>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d004      	beq.n	8001a76 <HAL_TIM_Base_Start_IT+0x4e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a13      	ldr	r2, [pc, #76]	@ (8001ac0 <HAL_TIM_Base_Start_IT+0x98>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d111      	bne.n	8001a9a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b06      	cmp	r3, #6
 8001a86:	d010      	beq.n	8001aaa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a98:	e007      	b.n	8001aaa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40000c00 	.word	0x40000c00
 8001ac0:	40014000 	.word	0x40014000

08001ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d020      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01b      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f06f 0202 	mvn.w	r2, #2
 8001af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8d2 	bl	8001cb8 <HAL_TIM_IC_CaptureCallback>
 8001b14:	e005      	b.n	8001b22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8c4 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f8d5 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d020      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d01b      	beq.n	8001b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0204 	mvn.w	r2, #4
 8001b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8ac 	bl	8001cb8 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f89e 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8af 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d020      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0208 	mvn.w	r2, #8
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2204      	movs	r2, #4
 8001b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f886 	bl	8001cb8 <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f878 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f889 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d020      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01b      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0210 	mvn.w	r2, #16
 8001bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2208      	movs	r2, #8
 8001be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f860 	bl	8001cb8 <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e005      	b.n	8001c06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f852 	bl	8001ca4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f863 	bl	8001ccc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00c      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0201 	mvn.w	r2, #1
 8001c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fe18 	bl	8000860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00c      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8c4 	bl	8001ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00c      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f834 	bl	8001ce0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00c      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0220 	mvn.w	r2, #32
 8001c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f896 	bl	8001dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a2c      	ldr	r2, [pc, #176]	@ (8001db8 <TIM_Base_SetConfig+0xc4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d003      	beq.n	8001d14 <TIM_Base_SetConfig+0x20>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8001dbc <TIM_Base_SetConfig+0xc8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d108      	bne.n	8001d26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a23      	ldr	r2, [pc, #140]	@ (8001db8 <TIM_Base_SetConfig+0xc4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00b      	beq.n	8001d46 <TIM_Base_SetConfig+0x52>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a22      	ldr	r2, [pc, #136]	@ (8001dbc <TIM_Base_SetConfig+0xc8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <TIM_Base_SetConfig+0x52>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a21      	ldr	r2, [pc, #132]	@ (8001dc0 <TIM_Base_SetConfig+0xcc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d003      	beq.n	8001d46 <TIM_Base_SetConfig+0x52>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a20      	ldr	r2, [pc, #128]	@ (8001dc4 <TIM_Base_SetConfig+0xd0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d108      	bne.n	8001d58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <TIM_Base_SetConfig+0xc4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d103      	bne.n	8001d8c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f023 0201 	bic.w	r2, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
  }
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	40000c00 	.word	0x40000c00
 8001dc0:	40014000 	.word	0x40014000
 8001dc4:	40014800 	.word	0x40014800

08001dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <__NVIC_SetPriority>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	@ (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <SysTick_Handler+0x1c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e4c:	f002 f968 	bl	8004120 <xTaskGetSchedulerState>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e56:	f003 f85f 	bl	8004f18 <xPortSysTickHandler>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e68:	2100      	movs	r1, #0
 8001e6a:	f06f 0004 	mvn.w	r0, #4
 8001e6e:	f7ff ffbf 	bl	8001df0 <__NVIC_SetPriority>
#endif
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e7e:	f3ef 8305 	mrs	r3, IPSR
 8001e82:	603b      	str	r3, [r7, #0]
  return(result);
 8001e84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e8a:	f06f 0305 	mvn.w	r3, #5
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	e00c      	b.n	8001eac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <osKernelInitialize+0x44>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d105      	bne.n	8001ea6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <osKernelInitialize+0x44>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	e002      	b.n	8001eac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001eac:	687b      	ldr	r3, [r7, #4]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000094 	.word	0x20000094

08001ec0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ec6:	f3ef 8305 	mrs	r3, IPSR
 8001eca:	603b      	str	r3, [r7, #0]
  return(result);
 8001ecc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <osKernelStart+0x1a>
    stat = osErrorISR;
 8001ed2:	f06f 0305 	mvn.w	r3, #5
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	e010      	b.n	8001efc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <osKernelStart+0x48>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d109      	bne.n	8001ef6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001ee2:	f7ff ffbf 	bl	8001e64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <osKernelStart+0x48>)
 8001ee8:	2202      	movs	r2, #2
 8001eea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001eec:	f001 fcca 	bl	8003884 <vTaskStartScheduler>
      stat = osOK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	e002      	b.n	8001efc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000094 	.word	0x20000094

08001f0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08e      	sub	sp, #56	@ 0x38
 8001f10:	af04      	add	r7, sp, #16
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f1c:	f3ef 8305 	mrs	r3, IPSR
 8001f20:	617b      	str	r3, [r7, #20]
  return(result);
 8001f22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d17e      	bne.n	8002026 <osThreadNew+0x11a>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d07b      	beq.n	8002026 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f2e:	2380      	movs	r3, #128	@ 0x80
 8001f30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f32:	2318      	movs	r3, #24
 8001f34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d045      	beq.n	8001fd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d002      	beq.n	8001f54 <osThreadNew+0x48>
        name = attr->name;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <osThreadNew+0x6e>
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b38      	cmp	r3, #56	@ 0x38
 8001f6c:	d805      	bhi.n	8001f7a <osThreadNew+0x6e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <osThreadNew+0x72>
        return (NULL);
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e054      	b.n	8002028 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00e      	beq.n	8001fb4 <osThreadNew+0xa8>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001f9c:	d90a      	bls.n	8001fb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <osThreadNew+0xa8>
        mem = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	e010      	b.n	8001fd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10c      	bne.n	8001fd6 <osThreadNew+0xca>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d108      	bne.n	8001fd6 <osThreadNew+0xca>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <osThreadNew+0xca>
          mem = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
 8001fd0:	e001      	b.n	8001fd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d110      	bne.n	8001ffe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fe4:	9202      	str	r2, [sp, #8]
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	6a3a      	ldr	r2, [r7, #32]
 8001ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f001 fa6a 	bl	80034cc <xTaskCreateStatic>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	e013      	b.n	8002026 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d110      	bne.n	8002026 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	b29a      	uxth	r2, r3
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f001 fab8 	bl	800358c <xTaskCreate>
 800201c:	4603      	mov	r3, r0
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <osThreadNew+0x11a>
            hTask = NULL;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002026:	693b      	ldr	r3, [r7, #16]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3728      	adds	r7, #40	@ 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002038:	f3ef 8305 	mrs	r3, IPSR
 800203c:	60bb      	str	r3, [r7, #8]
  return(result);
 800203e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <osDelay+0x1c>
    stat = osErrorISR;
 8002044:	f06f 0305 	mvn.w	r3, #5
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	e007      	b.n	800205c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f001 fbde 	bl	8003818 <vTaskDelay>
    }
  }

  return (stat);
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002066:	b580      	push	{r7, lr}
 8002068:	b08a      	sub	sp, #40	@ 0x28
 800206a:	af02      	add	r7, sp, #8
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002076:	f3ef 8305 	mrs	r3, IPSR
 800207a:	613b      	str	r3, [r7, #16]
  return(result);
 800207c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800207e:	2b00      	cmp	r3, #0
 8002080:	d175      	bne.n	800216e <osSemaphoreNew+0x108>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d072      	beq.n	800216e <osSemaphoreNew+0x108>
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d86e      	bhi.n	800216e <osSemaphoreNew+0x108>
    mem = -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d015      	beq.n	80020c8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <osSemaphoreNew+0x4c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b4f      	cmp	r3, #79	@ 0x4f
 80020aa:	d902      	bls.n	80020b2 <osSemaphoreNew+0x4c>
        mem = 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	e00c      	b.n	80020cc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d108      	bne.n	80020cc <osSemaphoreNew+0x66>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <osSemaphoreNew+0x66>
          mem = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	e001      	b.n	80020cc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d2:	d04c      	beq.n	800216e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d128      	bne.n	800212c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10a      	bne.n	80020f6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2203      	movs	r2, #3
 80020e6:	9200      	str	r2, [sp, #0]
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	2001      	movs	r0, #1
 80020ee:	f000 fa2b 	bl	8002548 <xQueueGenericCreateStatic>
 80020f2:	61f8      	str	r0, [r7, #28]
 80020f4:	e005      	b.n	8002102 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80020f6:	2203      	movs	r2, #3
 80020f8:	2100      	movs	r1, #0
 80020fa:	2001      	movs	r0, #1
 80020fc:	f000 faa1 	bl	8002642 <xQueueGenericCreate>
 8002100:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d022      	beq.n	800214e <osSemaphoreNew+0xe8>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01f      	beq.n	800214e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800210e:	2300      	movs	r3, #0
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	69f8      	ldr	r0, [r7, #28]
 8002116:	f000 fb61 	bl	80027dc <xQueueGenericSend>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d016      	beq.n	800214e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002120:	69f8      	ldr	r0, [r7, #28]
 8002122:	f000 ffff 	bl	8003124 <vQueueDelete>
            hSemaphore = NULL;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e010      	b.n	800214e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d108      	bne.n	8002144 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	461a      	mov	r2, r3
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 fadf 	bl	80026fe <xQueueCreateCountingSemaphoreStatic>
 8002140:	61f8      	str	r0, [r7, #28]
 8002142:	e004      	b.n	800214e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fb12 	bl	8002770 <xQueueCreateCountingSemaphore>
 800214c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00c      	beq.n	800216e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <osSemaphoreNew+0xfc>
          name = attr->name;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e001      	b.n	8002166 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	69f8      	ldr	r0, [r7, #28]
 800216a:	f001 f927 	bl	80033bc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800216e:	69fb      	ldr	r3, [r7, #28]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d103      	bne.n	8002198 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002190:	f06f 0303 	mvn.w	r3, #3
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e039      	b.n	800220c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002198:	f3ef 8305 	mrs	r3, IPSR
 800219c:	60fb      	str	r3, [r7, #12]
  return(result);
 800219e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d022      	beq.n	80021ea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80021aa:	f06f 0303 	mvn.w	r3, #3
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	e02c      	b.n	800220c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	461a      	mov	r2, r3
 80021bc:	2100      	movs	r1, #0
 80021be:	6938      	ldr	r0, [r7, #16]
 80021c0:	f000 ff2e 	bl	8003020 <xQueueReceiveFromISR>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d003      	beq.n	80021d2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80021ca:	f06f 0302 	mvn.w	r3, #2
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e01c      	b.n	800220c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d019      	beq.n	800220c <osSemaphoreAcquire+0x94>
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <osSemaphoreAcquire+0xa0>)
 80021da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	e010      	b.n	800220c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80021ea:	6839      	ldr	r1, [r7, #0]
 80021ec:	6938      	ldr	r0, [r7, #16]
 80021ee:	f000 fe07 	bl	8002e00 <xQueueSemaphoreTake>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d009      	beq.n	800220c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80021fe:	f06f 0301 	mvn.w	r3, #1
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e002      	b.n	800220c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002206:	f06f 0302 	mvn.w	r3, #2
 800220a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800220c:	697b      	ldr	r3, [r7, #20]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000ed04 	.word	0xe000ed04

0800221c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002232:	f06f 0303 	mvn.w	r3, #3
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e02c      	b.n	8002294 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800223a:	f3ef 8305 	mrs	r3, IPSR
 800223e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002240:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01a      	beq.n	800227c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	4619      	mov	r1, r3
 8002250:	6938      	ldr	r0, [r7, #16]
 8002252:	f000 fc63 	bl	8002b1c <xQueueGiveFromISR>
 8002256:	4603      	mov	r3, r0
 8002258:	2b01      	cmp	r3, #1
 800225a:	d003      	beq.n	8002264 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800225c:	f06f 0302 	mvn.w	r3, #2
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e017      	b.n	8002294 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d014      	beq.n	8002294 <osSemaphoreRelease+0x78>
 800226a:	4b0d      	ldr	r3, [pc, #52]	@ (80022a0 <osSemaphoreRelease+0x84>)
 800226c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f3bf 8f4f 	dsb	sy
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	e00b      	b.n	8002294 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800227c:	2300      	movs	r3, #0
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	6938      	ldr	r0, [r7, #16]
 8002284:	f000 faaa 	bl	80027dc <xQueueGenericSend>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	d002      	beq.n	8002294 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800228e:	f06f 0302 	mvn.w	r3, #2
 8002292:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002294:	697b      	ldr	r3, [r7, #20]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000ed04 	.word	0xe000ed04

080022a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a07      	ldr	r2, [pc, #28]	@ (80022d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80022b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	4a06      	ldr	r2, [pc, #24]	@ (80022d4 <vApplicationGetIdleTaskMemory+0x30>)
 80022ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	601a      	str	r2, [r3, #0]
}
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000098 	.word	0x20000098
 80022d4:	200000f4 	.word	0x200000f4

080022d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <vApplicationGetTimerTaskMemory+0x2c>)
 80022e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4a06      	ldr	r2, [pc, #24]	@ (8002308 <vApplicationGetTimerTaskMemory+0x30>)
 80022ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022f6:	601a      	str	r2, [r3, #0]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	200002f4 	.word	0x200002f4
 8002308:	20000350 	.word	0x20000350

0800230c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f103 0208 	add.w	r2, r3, #8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f103 0208 	add.w	r2, r3, #8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 0208 	add.w	r2, r3, #8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d103      	bne.n	80023ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e00c      	b.n	80023e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3308      	adds	r3, #8
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e002      	b.n	80023dc <vListInsert+0x2e>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d2f6      	bcs.n	80023d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	601a      	str	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6892      	ldr	r2, [r2, #8]
 8002436:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6852      	ldr	r2, [r2, #4]
 8002440:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	d103      	bne.n	8002454 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1e5a      	subs	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10b      	bne.n	80024a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80024a0:	f002 fcaa 	bl	8004df8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	68f9      	ldr	r1, [r7, #12]
 80024ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	441a      	add	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	3b01      	subs	r3, #1
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	441a      	add	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	22ff      	movs	r2, #255	@ 0xff
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	22ff      	movs	r2, #255	@ 0xff
 80024ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d114      	bne.n	8002520 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01a      	beq.n	8002534 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3310      	adds	r3, #16
 8002502:	4618      	mov	r0, r3
 8002504:	f001 fc4c 	bl	8003da0 <xTaskRemoveFromEventList>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d012      	beq.n	8002534 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800250e:	4b0d      	ldr	r3, [pc, #52]	@ (8002544 <xQueueGenericReset+0xd0>)
 8002510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	f3bf 8f4f 	dsb	sy
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	e009      	b.n	8002534 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3310      	adds	r3, #16
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fef1 	bl	800230c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3324      	adds	r3, #36	@ 0x24
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff feec 	bl	800230c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002534:	f002 fc92 	bl	8004e5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000ed04 	.word	0xe000ed04

08002548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08e      	sub	sp, #56	@ 0x38
 800254c:	af02      	add	r7, sp, #8
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10b      	bne.n	8002574 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800255c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002560:	f383 8811 	msr	BASEPRI, r3
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10b      	bne.n	8002592 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800257a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	e7fd      	b.n	800258e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <xQueueGenericCreateStatic+0x56>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <xQueueGenericCreateStatic+0x5a>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <xQueueGenericCreateStatic+0x5c>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	623b      	str	r3, [r7, #32]
}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d102      	bne.n	80025cc <xQueueGenericCreateStatic+0x84>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <xQueueGenericCreateStatic+0x88>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <xQueueGenericCreateStatic+0x8a>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10b      	bne.n	80025ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	61fb      	str	r3, [r7, #28]
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	e7fd      	b.n	80025ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80025ee:	2350      	movs	r3, #80	@ 0x50
 80025f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b50      	cmp	r3, #80	@ 0x50
 80025f6:	d00b      	beq.n	8002610 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	61bb      	str	r3, [r7, #24]
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002610:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800261c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002624:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f840 	bl	80026b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800263a:	4618      	mov	r0, r3
 800263c:	3730      	adds	r7, #48	@ 0x30
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002642:	b580      	push	{r7, lr}
 8002644:	b08a      	sub	sp, #40	@ 0x28
 8002646:	af02      	add	r7, sp, #8
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	4613      	mov	r3, r2
 800264e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10b      	bne.n	800266e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	613b      	str	r3, [r7, #16]
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	e7fd      	b.n	800266a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3350      	adds	r3, #80	@ 0x50
 800267c:	4618      	mov	r0, r3
 800267e:	f002 fcdd 	bl	800503c <pvPortMalloc>
 8002682:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d011      	beq.n	80026ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3350      	adds	r3, #80	@ 0x50
 8002692:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	4613      	mov	r3, r2
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f805 	bl	80026b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026ae:	69bb      	ldr	r3, [r7, #24]
	}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026e6:	2101      	movs	r1, #1
 80026e8:	69b8      	ldr	r0, [r7, #24]
 80026ea:	f7ff fec3 	bl	8002474 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b08a      	sub	sp, #40	@ 0x28
 8002702:	af02      	add	r7, sp, #8
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	61bb      	str	r3, [r7, #24]
}
 8002722:	bf00      	nop
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	429a      	cmp	r2, r3
 800272e:	d90b      	bls.n	8002748 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	617b      	str	r3, [r7, #20]
}
 8002742:	bf00      	nop
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7ff fef8 	bl	8002548 <xQueueGenericCreateStatic>
 8002758:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002766:	69fb      	ldr	r3, [r7, #28]
	}
 8002768:	4618      	mov	r0, r3
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	613b      	str	r3, [r7, #16]
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d90b      	bls.n	80027b8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80027a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a4:	f383 8811 	msr	BASEPRI, r3
 80027a8:	f3bf 8f6f 	isb	sy
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	60fb      	str	r3, [r7, #12]
}
 80027b2:	bf00      	nop
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80027b8:	2202      	movs	r2, #2
 80027ba:	2100      	movs	r1, #0
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff40 	bl	8002642 <xQueueGenericCreate>
 80027c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80027d0:	697b      	ldr	r3, [r7, #20]
	}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08e      	sub	sp, #56	@ 0x38
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80027f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10b      	bne.n	8002810 <xQueueGenericSend+0x34>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800280a:	bf00      	nop
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <xQueueGenericSend+0x42>
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <xQueueGenericSend+0x46>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <xQueueGenericSend+0x48>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10b      	bne.n	8002840 <xQueueGenericSend+0x64>
	__asm volatile
 8002828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800282c:	f383 8811 	msr	BASEPRI, r3
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800283a:	bf00      	nop
 800283c:	bf00      	nop
 800283e:	e7fd      	b.n	800283c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d103      	bne.n	800284e <xQueueGenericSend+0x72>
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <xQueueGenericSend+0x76>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <xQueueGenericSend+0x78>
 8002852:	2300      	movs	r3, #0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <xQueueGenericSend+0x94>
	__asm volatile
 8002858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	623b      	str	r3, [r7, #32]
}
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002870:	f001 fc56 	bl	8004120 <xTaskGetSchedulerState>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <xQueueGenericSend+0xa4>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <xQueueGenericSend+0xa8>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <xQueueGenericSend+0xaa>
 8002884:	2300      	movs	r3, #0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	61fb      	str	r3, [r7, #28]
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	e7fd      	b.n	800289e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028a2:	f002 faa9 	bl	8004df8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d302      	bcc.n	80028b8 <xQueueGenericSend+0xdc>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d129      	bne.n	800290c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028be:	f000 fc6d 	bl	800319c <prvCopyDataToQueue>
 80028c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d010      	beq.n	80028ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	3324      	adds	r3, #36	@ 0x24
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 fa65 	bl	8003da0 <xTaskRemoveFromEventList>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028dc:	4b3f      	ldr	r3, [pc, #252]	@ (80029dc <xQueueGenericSend+0x200>)
 80028de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	e00a      	b.n	8002904 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028f4:	4b39      	ldr	r3, [pc, #228]	@ (80029dc <xQueueGenericSend+0x200>)
 80028f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002904:	f002 faaa 	bl	8004e5c <vPortExitCritical>
				return pdPASS;
 8002908:	2301      	movs	r3, #1
 800290a:	e063      	b.n	80029d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002912:	f002 faa3 	bl	8004e5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002916:	2300      	movs	r3, #0
 8002918:	e05c      	b.n	80029d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800291a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	4618      	mov	r0, r3
 8002926:	f001 fa9f 	bl	8003e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800292a:	2301      	movs	r3, #1
 800292c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800292e:	f002 fa95 	bl	8004e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002932:	f001 f80f 	bl	8003954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002936:	f002 fa5f 	bl	8004df8 <vPortEnterCritical>
 800293a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002940:	b25b      	sxtb	r3, r3
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d103      	bne.n	8002950 <xQueueGenericSend+0x174>
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002956:	b25b      	sxtb	r3, r3
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d103      	bne.n	8002966 <xQueueGenericSend+0x18a>
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002966:	f002 fa79 	bl	8004e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800296a:	1d3a      	adds	r2, r7, #4
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f001 fa8e 	bl	8003e94 <xTaskCheckForTimeOut>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d124      	bne.n	80029c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800297e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002980:	f000 fd04 	bl	800338c <prvIsQueueFull>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d018      	beq.n	80029bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800298a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298c:	3310      	adds	r3, #16
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f001 f9b2 	bl	8003cfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800299a:	f000 fc8f 	bl	80032bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800299e:	f000 ffe7 	bl	8003970 <xTaskResumeAll>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f af7c 	bne.w	80028a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80029aa:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <xQueueGenericSend+0x200>)
 80029ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	e772      	b.n	80028a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029be:	f000 fc7d 	bl	80032bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029c2:	f000 ffd5 	bl	8003970 <xTaskResumeAll>
 80029c6:	e76c      	b.n	80028a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029ca:	f000 fc77 	bl	80032bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029ce:	f000 ffcf 	bl	8003970 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3738      	adds	r7, #56	@ 0x38
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b090      	sub	sp, #64	@ 0x40
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80029f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10b      	bne.n	8002a10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a0a:	bf00      	nop
 8002a0c:	bf00      	nop
 8002a0e:	e7fd      	b.n	8002a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <xQueueGenericSendFromISR+0x3e>
 8002a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <xQueueGenericSendFromISR+0x42>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <xQueueGenericSendFromISR+0x44>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10b      	bne.n	8002a40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d103      	bne.n	8002a4e <xQueueGenericSendFromISR+0x6e>
 8002a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <xQueueGenericSendFromISR+0x72>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <xQueueGenericSendFromISR+0x74>
 8002a52:	2300      	movs	r3, #0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10b      	bne.n	8002a70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	623b      	str	r3, [r7, #32]
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a70:	f002 faa2 	bl	8004fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a74:	f3ef 8211 	mrs	r2, BASEPRI
 8002a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	61fa      	str	r2, [r7, #28]
 8002a8a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d302      	bcc.n	8002aa2 <xQueueGenericSendFromISR+0xc2>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d12f      	bne.n	8002b02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002aa8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ab8:	f000 fb70 	bl	800319c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002abc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d112      	bne.n	8002aec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad0:	3324      	adds	r3, #36	@ 0x24
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 f964 	bl	8003da0 <xTaskRemoveFromEventList>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00e      	beq.n	8002afc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e007      	b.n	8002afc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002aec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	b25a      	sxtb	r2, r3
 8002af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002afc:	2301      	movs	r3, #1
 8002afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b00:	e001      	b.n	8002b06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3740      	adds	r7, #64	@ 0x40
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08e      	sub	sp, #56	@ 0x38
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10b      	bne.n	8002b48 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	623b      	str	r3, [r7, #32]
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	61fb      	str	r3, [r7, #28]
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <xQueueGiveFromISR+0x5c>
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <xQueueGiveFromISR+0x60>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <xQueueGiveFromISR+0x62>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	61bb      	str	r3, [r7, #24]
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	e7fd      	b.n	8002b96 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b9a:	f002 fa0d 	bl	8004fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8002b9e:	f3ef 8211 	mrs	r2, BASEPRI
 8002ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	617a      	str	r2, [r7, #20]
 8002bb4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002bb6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bbe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d22b      	bcs.n	8002c22 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bdc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d112      	bne.n	8002c0c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf0:	3324      	adds	r3, #36	@ 0x24
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 f8d4 	bl	8003da0 <xTaskRemoveFromEventList>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00b      	beq.n	8002c1c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e007      	b.n	8002c1c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	b25a      	sxtb	r2, r3
 8002c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c20:	e001      	b.n	8002c26 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c28:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f383 8811 	msr	BASEPRI, r3
}
 8002c30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3738      	adds	r7, #56	@ 0x38
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	@ 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <xQueueReceive+0x32>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	623b      	str	r3, [r7, #32]
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <xQueueReceive+0x40>
 8002c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <xQueueReceive+0x44>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <xQueueReceive+0x46>
 8002c80:	2300      	movs	r3, #0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <xQueueReceive+0x62>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	61fb      	str	r3, [r7, #28]
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	e7fd      	b.n	8002c9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c9e:	f001 fa3f 	bl	8004120 <xTaskGetSchedulerState>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <xQueueReceive+0x72>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <xQueueReceive+0x76>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <xQueueReceive+0x78>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <xQueueReceive+0x94>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	61bb      	str	r3, [r7, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cd0:	f002 f892 	bl	8004df8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01f      	beq.n	8002d20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ce4:	f000 fac4 	bl	8003270 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00f      	beq.n	8002d18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfa:	3310      	adds	r3, #16
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 f84f 	bl	8003da0 <xTaskRemoveFromEventList>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d08:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <xQueueReceive+0x1c0>)
 8002d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d18:	f002 f8a0 	bl	8004e5c <vPortExitCritical>
				return pdPASS;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e069      	b.n	8002df4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d26:	f002 f899 	bl	8004e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e062      	b.n	8002df4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d106      	bne.n	8002d42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f895 	bl	8003e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d42:	f002 f88b 	bl	8004e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d46:	f000 fe05 	bl	8003954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d4a:	f002 f855 	bl	8004df8 <vPortEnterCritical>
 8002d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d103      	bne.n	8002d64 <xQueueReceive+0x128>
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d103      	bne.n	8002d7a <xQueueReceive+0x13e>
 8002d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d7a:	f002 f86f 	bl	8004e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d7e:	1d3a      	adds	r2, r7, #4
 8002d80:	f107 0310 	add.w	r3, r7, #16
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 f884 	bl	8003e94 <xTaskCheckForTimeOut>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d123      	bne.n	8002dda <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d94:	f000 fae4 	bl	8003360 <prvIsQueueEmpty>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d017      	beq.n	8002dce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	3324      	adds	r3, #36	@ 0x24
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 ffa8 	bl	8003cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dae:	f000 fa85 	bl	80032bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002db2:	f000 fddd 	bl	8003970 <xTaskResumeAll>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d189      	bne.n	8002cd0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <xQueueReceive+0x1c0>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	e780      	b.n	8002cd0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dd0:	f000 fa74 	bl	80032bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dd4:	f000 fdcc 	bl	8003970 <xTaskResumeAll>
 8002dd8:	e77a      	b.n	8002cd0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ddc:	f000 fa6e 	bl	80032bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002de0:	f000 fdc6 	bl	8003970 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002de4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002de6:	f000 fabb 	bl	8003360 <prvIsQueueEmpty>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f43f af6f 	beq.w	8002cd0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002df2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3730      	adds	r7, #48	@ 0x30
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08e      	sub	sp, #56	@ 0x38
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	623b      	str	r3, [r7, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e40:	f383 8811 	msr	BASEPRI, r3
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f3bf 8f4f 	dsb	sy
 8002e4c:	61fb      	str	r3, [r7, #28]
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	e7fd      	b.n	8002e50 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e54:	f001 f964 	bl	8004120 <xTaskGetSchedulerState>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <xQueueSemaphoreTake+0x64>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <xQueueSemaphoreTake+0x68>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <xQueueSemaphoreTake+0x6a>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10b      	bne.n	8002e86 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	61bb      	str	r3, [r7, #24]
}
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	e7fd      	b.n	8002e82 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e86:	f001 ffb7 	bl	8004df8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d024      	beq.n	8002ee0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002ea6:	f001 fab5 	bl	8004414 <pvTaskIncrementMutexHeldCount>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00f      	beq.n	8002ed8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eba:	3310      	adds	r3, #16
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 ff6f 	bl	8003da0 <xTaskRemoveFromEventList>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d007      	beq.n	8002ed8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ec8:	4b54      	ldr	r3, [pc, #336]	@ (800301c <xQueueSemaphoreTake+0x21c>)
 8002eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ed8:	f001 ffc0 	bl	8004e5c <vPortExitCritical>
				return pdPASS;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e098      	b.n	8003012 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d112      	bne.n	8002f0c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	617b      	str	r3, [r7, #20]
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f04:	f001 ffaa 	bl	8004e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e082      	b.n	8003012 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 ffa6 	bl	8003e68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f20:	f001 ff9c 	bl	8004e5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f24:	f000 fd16 	bl	8003954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f28:	f001 ff66 	bl	8004df8 <vPortEnterCritical>
 8002f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d103      	bne.n	8002f42 <xQueueSemaphoreTake+0x142>
 8002f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d103      	bne.n	8002f58 <xQueueSemaphoreTake+0x158>
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f58:	f001 ff80 	bl	8004e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f5c:	463a      	mov	r2, r7
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 ff95 	bl	8003e94 <xTaskCheckForTimeOut>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d132      	bne.n	8002fd6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f72:	f000 f9f5 	bl	8003360 <prvIsQueueEmpty>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d026      	beq.n	8002fca <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002f84:	f001 ff38 	bl	8004df8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 f8e5 	bl	800415c <xTaskPriorityInherit>
 8002f92:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002f94:	f001 ff62 	bl	8004e5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9a:	3324      	adds	r3, #36	@ 0x24
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 feab 	bl	8003cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fa8:	f000 f988 	bl	80032bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fac:	f000 fce0 	bl	8003970 <xTaskResumeAll>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f47f af67 	bne.w	8002e86 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002fb8:	4b18      	ldr	r3, [pc, #96]	@ (800301c <xQueueSemaphoreTake+0x21c>)
 8002fba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	e75d      	b.n	8002e86 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002fca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fcc:	f000 f976 	bl	80032bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fd0:	f000 fcce 	bl	8003970 <xTaskResumeAll>
 8002fd4:	e757      	b.n	8002e86 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002fd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fd8:	f000 f970 	bl	80032bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fdc:	f000 fcc8 	bl	8003970 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fe0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fe2:	f000 f9bd 	bl	8003360 <prvIsQueueEmpty>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f43f af4c 	beq.w	8002e86 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002ff4:	f001 ff00 	bl	8004df8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002ff8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ffa:	f000 f8b7 	bl	800316c <prvGetDisinheritPriorityAfterTimeout>
 8002ffe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003006:	4618      	mov	r0, r3
 8003008:	f001 f980 	bl	800430c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800300c:	f001 ff26 	bl	8004e5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003012:	4618      	mov	r0, r3
 8003014:	3738      	adds	r7, #56	@ 0x38
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	@ 0x38
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10b      	bne.n	800304e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	623b      	str	r3, [r7, #32]
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	e7fd      	b.n	800304a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <xQueueReceiveFromISR+0x3c>
 8003054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <xQueueReceiveFromISR+0x40>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <xQueueReceiveFromISR+0x42>
 8003060:	2300      	movs	r3, #0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800306a:	f383 8811 	msr	BASEPRI, r3
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	61fb      	str	r3, [r7, #28]
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	e7fd      	b.n	800307a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800307e:	f001 ff9b 	bl	8004fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8003082:	f3ef 8211 	mrs	r2, BASEPRI
 8003086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	61ba      	str	r2, [r7, #24]
 8003098:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800309a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800309c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d02f      	beq.n	800310a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030b8:	f000 f8da 	bl	8003270 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80030c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d112      	bne.n	80030f4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d8:	3310      	adds	r3, #16
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fe60 	bl	8003da0 <xTaskRemoveFromEventList>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e007      	b.n	8003104 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80030f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030f8:	3301      	adds	r3, #1
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	b25a      	sxtb	r2, r3
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	637b      	str	r3, [r7, #52]	@ 0x34
 8003108:	e001      	b.n	800310e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800310a:	2300      	movs	r3, #0
 800310c:	637b      	str	r3, [r7, #52]	@ 0x34
 800310e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003110:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f383 8811 	msr	BASEPRI, r3
}
 8003118:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800311a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800311c:	4618      	mov	r0, r3
 800311e:	3738      	adds	r7, #56	@ 0x38
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <vQueueDelete+0x2a>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	60bb      	str	r3, [r7, #8]
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f95e 	bl	8003410 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800315a:	2b00      	cmp	r3, #0
 800315c:	d102      	bne.n	8003164 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f002 f83a 	bl	80051d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	e001      	b.n	800318e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800318e:	68fb      	ldr	r3, [r7, #12]
	}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d14d      	bne.n	800325e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 f830 	bl	800422c <xTaskPriorityDisinherit>
 80031cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e043      	b.n	800325e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d119      	bne.n	8003210 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6858      	ldr	r0, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	461a      	mov	r2, r3
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	f002 f942 	bl	8005470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	441a      	add	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	d32b      	bcc.n	800325e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	e026      	b.n	800325e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68d8      	ldr	r0, [r3, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	461a      	mov	r2, r3
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	f002 f928 	bl	8005470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	425b      	negs	r3, r3
 800322a:	441a      	add	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d207      	bcs.n	800324c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	425b      	negs	r3, r3
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d105      	bne.n	800325e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	3b01      	subs	r3, #1
 800325c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003266:	697b      	ldr	r3, [r7, #20]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d018      	beq.n	80032b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	441a      	add	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	d303      	bcc.n	80032a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68d9      	ldr	r1, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	461a      	mov	r2, r3
 80032ae:	6838      	ldr	r0, [r7, #0]
 80032b0:	f002 f8de 	bl	8005470 <memcpy>
	}
}
 80032b4:	bf00      	nop
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032c4:	f001 fd98 	bl	8004df8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032d0:	e011      	b.n	80032f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	3324      	adds	r3, #36	@ 0x24
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fd5e 	bl	8003da0 <xTaskRemoveFromEventList>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80032ea:	f000 fe37 	bl	8003f5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	dce9      	bgt.n	80032d2 <prvUnlockQueue+0x16>
 80032fe:	e000      	b.n	8003302 <prvUnlockQueue+0x46>
					break;
 8003300:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	22ff      	movs	r2, #255	@ 0xff
 8003306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800330a:	f001 fda7 	bl	8004e5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800330e:	f001 fd73 	bl	8004df8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003318:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800331a:	e011      	b.n	8003340 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d012      	beq.n	800334a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3310      	adds	r3, #16
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fd39 	bl	8003da0 <xTaskRemoveFromEventList>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003334:	f000 fe12 	bl	8003f5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	3b01      	subs	r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003344:	2b00      	cmp	r3, #0
 8003346:	dce9      	bgt.n	800331c <prvUnlockQueue+0x60>
 8003348:	e000      	b.n	800334c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800334a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	22ff      	movs	r2, #255	@ 0xff
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003354:	f001 fd82 	bl	8004e5c <vPortExitCritical>
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003368:	f001 fd46 	bl	8004df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003374:	2301      	movs	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e001      	b.n	800337e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800337e:	f001 fd6d 	bl	8004e5c <vPortExitCritical>

	return xReturn;
 8003382:	68fb      	ldr	r3, [r7, #12]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003394:	f001 fd30 	bl	8004df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d102      	bne.n	80033aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e001      	b.n	80033ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ae:	f001 fd55 	bl	8004e5c <vPortExitCritical>

	return xReturn;
 80033b2:	68fb      	ldr	r3, [r7, #12]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e014      	b.n	80033f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033cc:	4a0f      	ldr	r2, [pc, #60]	@ (800340c <vQueueAddToRegistry+0x50>)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033d8:	490c      	ldr	r1, [pc, #48]	@ (800340c <vQueueAddToRegistry+0x50>)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033e2:	4a0a      	ldr	r2, [pc, #40]	@ (800340c <vQueueAddToRegistry+0x50>)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80033ee:	e006      	b.n	80033fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3301      	adds	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b07      	cmp	r3, #7
 80033fa:	d9e7      	bls.n	80033cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000750 	.word	0x20000750

08003410 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e016      	b.n	800344c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800341e:	4a10      	ldr	r2, [pc, #64]	@ (8003460 <vQueueUnregisterQueue+0x50>)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	429a      	cmp	r2, r3
 800342c:	d10b      	bne.n	8003446 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800342e:	4a0c      	ldr	r2, [pc, #48]	@ (8003460 <vQueueUnregisterQueue+0x50>)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2100      	movs	r1, #0
 8003434:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003438:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <vQueueUnregisterQueue+0x50>)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	2200      	movs	r2, #0
 8003442:	605a      	str	r2, [r3, #4]
				break;
 8003444:	e006      	b.n	8003454 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3301      	adds	r3, #1
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b07      	cmp	r3, #7
 8003450:	d9e5      	bls.n	800341e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	20000750 	.word	0x20000750

08003464 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003474:	f001 fcc0 	bl	8004df8 <vPortEnterCritical>
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800347e:	b25b      	sxtb	r3, r3
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d103      	bne.n	800348e <vQueueWaitForMessageRestricted+0x2a>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003494:	b25b      	sxtb	r3, r3
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349a:	d103      	bne.n	80034a4 <vQueueWaitForMessageRestricted+0x40>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034a4:	f001 fcda 	bl	8004e5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d106      	bne.n	80034be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	3324      	adds	r3, #36	@ 0x24
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	68b9      	ldr	r1, [r7, #8]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fc45 	bl	8003d48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff fefc 	bl	80032bc <prvUnlockQueue>
	}
 80034c4:	bf00      	nop
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08e      	sub	sp, #56	@ 0x38
 80034d0:	af04      	add	r7, sp, #16
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	623b      	str	r3, [r7, #32]
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	e7fd      	b.n	80034f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <xTaskCreateStatic+0x4a>
	__asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	61fb      	str	r3, [r7, #28]
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	e7fd      	b.n	8003512 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003516:	235c      	movs	r3, #92	@ 0x5c
 8003518:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b5c      	cmp	r3, #92	@ 0x5c
 800351e:	d00b      	beq.n	8003538 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	61bb      	str	r3, [r7, #24]
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003538:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01e      	beq.n	800357e <xTaskCreateStatic+0xb2>
 8003540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003542:	2b00      	cmp	r3, #0
 8003544:	d01b      	beq.n	800357e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800354e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003558:	2300      	movs	r3, #0
 800355a:	9303      	str	r3, [sp, #12]
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	9302      	str	r3, [sp, #8]
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f850 	bl	8003616 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003578:	f000 f8de 	bl	8003738 <prvAddNewTaskToReadyList>
 800357c:	e001      	b.n	8003582 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003582:	697b      	ldr	r3, [r7, #20]
	}
 8003584:	4618      	mov	r0, r3
 8003586:	3728      	adds	r7, #40	@ 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08c      	sub	sp, #48	@ 0x30
 8003590:	af04      	add	r7, sp, #16
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fd4b 	bl	800503c <pvPortMalloc>
 80035a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00e      	beq.n	80035cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035ae:	205c      	movs	r0, #92	@ 0x5c
 80035b0:	f001 fd44 	bl	800503c <pvPortMalloc>
 80035b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80035c2:	e005      	b.n	80035d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035c4:	6978      	ldr	r0, [r7, #20]
 80035c6:	f001 fe07 	bl	80051d8 <vPortFree>
 80035ca:	e001      	b.n	80035d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d017      	beq.n	8003606 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	2300      	movs	r3, #0
 80035e2:	9303      	str	r3, [sp, #12]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	9302      	str	r3, [sp, #8]
 80035e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f80e 	bl	8003616 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035fa:	69f8      	ldr	r0, [r7, #28]
 80035fc:	f000 f89c 	bl	8003738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003600:	2301      	movs	r3, #1
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e002      	b.n	800360c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800360c:	69bb      	ldr	r3, [r7, #24]
	}
 800360e:	4618      	mov	r0, r3
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b088      	sub	sp, #32
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	461a      	mov	r2, r3
 800362e:	21a5      	movs	r1, #165	@ 0xa5
 8003630:	f001 fef2 	bl	8005418 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800363e:	3b01      	subs	r3, #1
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f023 0307 	bic.w	r3, r3, #7
 800364c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	617b      	str	r3, [r7, #20]
}
 800366a:	bf00      	nop
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01f      	beq.n	80036b6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e012      	b.n	80036a2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	7819      	ldrb	r1, [r3, #0]
 8003684:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	3334      	adds	r3, #52	@ 0x34
 800368c:	460a      	mov	r2, r1
 800368e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d006      	beq.n	80036aa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	3301      	adds	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d9e9      	bls.n	800367c <prvInitialiseNewTask+0x66>
 80036a8:	e000      	b.n	80036ac <prvInitialiseNewTask+0x96>
			{
				break;
 80036aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036b4:	e003      	b.n	80036be <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c0:	2b37      	cmp	r3, #55	@ 0x37
 80036c2:	d901      	bls.n	80036c8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036c4:	2337      	movs	r3, #55	@ 0x37
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	2200      	movs	r2, #0
 80036d8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	3304      	adds	r3, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fe34 	bl	800234c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	3318      	adds	r3, #24
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fe fe2f 	bl	800234c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003702:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	69b8      	ldr	r0, [r7, #24]
 8003718:	f001 fa3e 	bl	8004b98 <pxPortInitialiseStack>
 800371c:	4602      	mov	r2, r0
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800372c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800372e:	bf00      	nop
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003740:	f001 fb5a 	bl	8004df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003744:	4b2d      	ldr	r3, [pc, #180]	@ (80037fc <prvAddNewTaskToReadyList+0xc4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3301      	adds	r3, #1
 800374a:	4a2c      	ldr	r2, [pc, #176]	@ (80037fc <prvAddNewTaskToReadyList+0xc4>)
 800374c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800374e:	4b2c      	ldr	r3, [pc, #176]	@ (8003800 <prvAddNewTaskToReadyList+0xc8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003756:	4a2a      	ldr	r2, [pc, #168]	@ (8003800 <prvAddNewTaskToReadyList+0xc8>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800375c:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <prvAddNewTaskToReadyList+0xc4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d110      	bne.n	8003786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003764:	f000 fc1e 	bl	8003fa4 <prvInitialiseTaskLists>
 8003768:	e00d      	b.n	8003786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800376a:	4b26      	ldr	r3, [pc, #152]	@ (8003804 <prvAddNewTaskToReadyList+0xcc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003772:	4b23      	ldr	r3, [pc, #140]	@ (8003800 <prvAddNewTaskToReadyList+0xc8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	429a      	cmp	r2, r3
 800377e:	d802      	bhi.n	8003786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003780:	4a1f      	ldr	r2, [pc, #124]	@ (8003800 <prvAddNewTaskToReadyList+0xc8>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003786:	4b20      	ldr	r3, [pc, #128]	@ (8003808 <prvAddNewTaskToReadyList+0xd0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3301      	adds	r3, #1
 800378c:	4a1e      	ldr	r2, [pc, #120]	@ (8003808 <prvAddNewTaskToReadyList+0xd0>)
 800378e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <prvAddNewTaskToReadyList+0xd0>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <prvAddNewTaskToReadyList+0xd4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d903      	bls.n	80037ac <prvAddNewTaskToReadyList+0x74>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	4a18      	ldr	r2, [pc, #96]	@ (800380c <prvAddNewTaskToReadyList+0xd4>)
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4a15      	ldr	r2, [pc, #84]	@ (8003810 <prvAddNewTaskToReadyList+0xd8>)
 80037ba:	441a      	add	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f7fe fdcf 	bl	8002366 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037c8:	f001 fb48 	bl	8004e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003804 <prvAddNewTaskToReadyList+0xcc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003800 <prvAddNewTaskToReadyList+0xc8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037de:	429a      	cmp	r2, r3
 80037e0:	d207      	bcs.n	80037f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <prvAddNewTaskToReadyList+0xdc>)
 80037e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000c64 	.word	0x20000c64
 8003800:	20000790 	.word	0x20000790
 8003804:	20000c70 	.word	0x20000c70
 8003808:	20000c80 	.word	0x20000c80
 800380c:	20000c6c 	.word	0x20000c6c
 8003810:	20000794 	.word	0x20000794
 8003814:	e000ed04 	.word	0xe000ed04

08003818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d018      	beq.n	800385c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800382a:	4b14      	ldr	r3, [pc, #80]	@ (800387c <vTaskDelay+0x64>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <vTaskDelay+0x32>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	60bb      	str	r3, [r7, #8]
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	e7fd      	b.n	8003846 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800384a:	f000 f883 	bl	8003954 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800384e:	2100      	movs	r1, #0
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fdf3 	bl	800443c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003856:	f000 f88b 	bl	8003970 <xTaskResumeAll>
 800385a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d107      	bne.n	8003872 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003862:	4b07      	ldr	r3, [pc, #28]	@ (8003880 <vTaskDelay+0x68>)
 8003864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000c8c 	.word	0x20000c8c
 8003880:	e000ed04 	.word	0xe000ed04

08003884 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	@ 0x28
 8003888:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003892:	463a      	mov	r2, r7
 8003894:	1d39      	adds	r1, r7, #4
 8003896:	f107 0308 	add.w	r3, r7, #8
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fd02 	bl	80022a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038a0:	6839      	ldr	r1, [r7, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	9202      	str	r2, [sp, #8]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	2300      	movs	r3, #0
 80038b0:	460a      	mov	r2, r1
 80038b2:	4922      	ldr	r1, [pc, #136]	@ (800393c <vTaskStartScheduler+0xb8>)
 80038b4:	4822      	ldr	r0, [pc, #136]	@ (8003940 <vTaskStartScheduler+0xbc>)
 80038b6:	f7ff fe09 	bl	80034cc <xTaskCreateStatic>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4a21      	ldr	r2, [pc, #132]	@ (8003944 <vTaskStartScheduler+0xc0>)
 80038be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038c0:	4b20      	ldr	r3, [pc, #128]	@ (8003944 <vTaskStartScheduler+0xc0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038c8:	2301      	movs	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e001      	b.n	80038d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d102      	bne.n	80038de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038d8:	f000 fe04 	bl	80044e4 <xTimerCreateTimerTask>
 80038dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d116      	bne.n	8003912 <vTaskStartScheduler+0x8e>
	__asm volatile
 80038e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
 80038f4:	613b      	str	r3, [r7, #16]
}
 80038f6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038f8:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <vTaskStartScheduler+0xc4>)
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295
 80038fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003900:	4b12      	ldr	r3, [pc, #72]	@ (800394c <vTaskStartScheduler+0xc8>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <vTaskStartScheduler+0xcc>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800390c:	f001 f9d0 	bl	8004cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003910:	e00f      	b.n	8003932 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003918:	d10b      	bne.n	8003932 <vTaskStartScheduler+0xae>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	60fb      	str	r3, [r7, #12]
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <vTaskStartScheduler+0xaa>
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	080054fc 	.word	0x080054fc
 8003940:	08003f75 	.word	0x08003f75
 8003944:	20000c88 	.word	0x20000c88
 8003948:	20000c84 	.word	0x20000c84
 800394c:	20000c70 	.word	0x20000c70
 8003950:	20000c68 	.word	0x20000c68

08003954 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <vTaskSuspendAll+0x18>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	4a03      	ldr	r2, [pc, #12]	@ (800396c <vTaskSuspendAll+0x18>)
 8003960:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	20000c8c 	.word	0x20000c8c

08003970 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800397e:	4b42      	ldr	r3, [pc, #264]	@ (8003a88 <xTaskResumeAll+0x118>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <xTaskResumeAll+0x2e>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	603b      	str	r3, [r7, #0]
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	e7fd      	b.n	800399a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800399e:	f001 fa2b 	bl	8004df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039a2:	4b39      	ldr	r3, [pc, #228]	@ (8003a88 <xTaskResumeAll+0x118>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	4a37      	ldr	r2, [pc, #220]	@ (8003a88 <xTaskResumeAll+0x118>)
 80039aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ac:	4b36      	ldr	r3, [pc, #216]	@ (8003a88 <xTaskResumeAll+0x118>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d162      	bne.n	8003a7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039b4:	4b35      	ldr	r3, [pc, #212]	@ (8003a8c <xTaskResumeAll+0x11c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d05e      	beq.n	8003a7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039bc:	e02f      	b.n	8003a1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039be:	4b34      	ldr	r3, [pc, #208]	@ (8003a90 <xTaskResumeAll+0x120>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3318      	adds	r3, #24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fd28 	bl	8002420 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fd23 	bl	8002420 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039de:	4b2d      	ldr	r3, [pc, #180]	@ (8003a94 <xTaskResumeAll+0x124>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d903      	bls.n	80039ee <xTaskResumeAll+0x7e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003a94 <xTaskResumeAll+0x124>)
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4a27      	ldr	r2, [pc, #156]	@ (8003a98 <xTaskResumeAll+0x128>)
 80039fc:	441a      	add	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4619      	mov	r1, r3
 8003a04:	4610      	mov	r0, r2
 8003a06:	f7fe fcae 	bl	8002366 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0e:	4b23      	ldr	r3, [pc, #140]	@ (8003a9c <xTaskResumeAll+0x12c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003a18:	4b21      	ldr	r3, [pc, #132]	@ (8003aa0 <xTaskResumeAll+0x130>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003a90 <xTaskResumeAll+0x120>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1cb      	bne.n	80039be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a2c:	f000 fb58 	bl	80040e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a30:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa4 <xTaskResumeAll+0x134>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a3c:	f000 f846 	bl	8003acc <xTaskIncrementTick>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a46:	4b16      	ldr	r3, [pc, #88]	@ (8003aa0 <xTaskResumeAll+0x130>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1f1      	bne.n	8003a3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003a58:	4b12      	ldr	r3, [pc, #72]	@ (8003aa4 <xTaskResumeAll+0x134>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a5e:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <xTaskResumeAll+0x130>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a66:	2301      	movs	r3, #1
 8003a68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa8 <xTaskResumeAll+0x138>)
 8003a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a7a:	f001 f9ef 	bl	8004e5c <vPortExitCritical>

	return xAlreadyYielded;
 8003a7e:	68bb      	ldr	r3, [r7, #8]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000c8c 	.word	0x20000c8c
 8003a8c:	20000c64 	.word	0x20000c64
 8003a90:	20000c24 	.word	0x20000c24
 8003a94:	20000c6c 	.word	0x20000c6c
 8003a98:	20000794 	.word	0x20000794
 8003a9c:	20000790 	.word	0x20000790
 8003aa0:	20000c78 	.word	0x20000c78
 8003aa4:	20000c74 	.word	0x20000c74
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ab2:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <xTaskGetTickCount+0x1c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ab8:	687b      	ldr	r3, [r7, #4]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000c68 	.word	0x20000c68

08003acc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8003c14 <xTaskIncrementTick+0x148>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 8090 	bne.w	8003c00 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8003c18 <xTaskIncrementTick+0x14c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ae8:	4a4b      	ldr	r2, [pc, #300]	@ (8003c18 <xTaskIncrementTick+0x14c>)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d121      	bne.n	8003b38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003af4:	4b49      	ldr	r3, [pc, #292]	@ (8003c1c <xTaskIncrementTick+0x150>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	603b      	str	r3, [r7, #0]
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	e7fd      	b.n	8003b12 <xTaskIncrementTick+0x46>
 8003b16:	4b41      	ldr	r3, [pc, #260]	@ (8003c1c <xTaskIncrementTick+0x150>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	4b40      	ldr	r3, [pc, #256]	@ (8003c20 <xTaskIncrementTick+0x154>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a3e      	ldr	r2, [pc, #248]	@ (8003c1c <xTaskIncrementTick+0x150>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4a3e      	ldr	r2, [pc, #248]	@ (8003c20 <xTaskIncrementTick+0x154>)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c24 <xTaskIncrementTick+0x158>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	4a3c      	ldr	r2, [pc, #240]	@ (8003c24 <xTaskIncrementTick+0x158>)
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	f000 fad4 	bl	80040e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b38:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <xTaskIncrementTick+0x15c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d349      	bcc.n	8003bd6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b42:	4b36      	ldr	r3, [pc, #216]	@ (8003c1c <xTaskIncrementTick+0x150>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4c:	4b36      	ldr	r3, [pc, #216]	@ (8003c28 <xTaskIncrementTick+0x15c>)
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b52:	601a      	str	r2, [r3, #0]
					break;
 8003b54:	e03f      	b.n	8003bd6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b56:	4b31      	ldr	r3, [pc, #196]	@ (8003c1c <xTaskIncrementTick+0x150>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d203      	bcs.n	8003b76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003c28 <xTaskIncrementTick+0x15c>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b74:	e02f      	b.n	8003bd6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fc50 	bl	8002420 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d004      	beq.n	8003b92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3318      	adds	r3, #24
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe fc47 	bl	8002420 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b96:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <xTaskIncrementTick+0x160>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d903      	bls.n	8003ba6 <xTaskIncrementTick+0xda>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba2:	4a22      	ldr	r2, [pc, #136]	@ (8003c2c <xTaskIncrementTick+0x160>)
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c30 <xTaskIncrementTick+0x164>)
 8003bb4:	441a      	add	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7fe fbd2 	bl	8002366 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c34 <xTaskIncrementTick+0x168>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d3b8      	bcc.n	8003b42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bd4:	e7b5      	b.n	8003b42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bd6:	4b17      	ldr	r3, [pc, #92]	@ (8003c34 <xTaskIncrementTick+0x168>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bdc:	4914      	ldr	r1, [pc, #80]	@ (8003c30 <xTaskIncrementTick+0x164>)
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d901      	bls.n	8003bf2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003bf2:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <xTaskIncrementTick+0x16c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e004      	b.n	8003c0a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c00:	4b0e      	ldr	r3, [pc, #56]	@ (8003c3c <xTaskIncrementTick+0x170>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <xTaskIncrementTick+0x170>)
 8003c08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c0a:	697b      	ldr	r3, [r7, #20]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000c8c 	.word	0x20000c8c
 8003c18:	20000c68 	.word	0x20000c68
 8003c1c:	20000c1c 	.word	0x20000c1c
 8003c20:	20000c20 	.word	0x20000c20
 8003c24:	20000c7c 	.word	0x20000c7c
 8003c28:	20000c84 	.word	0x20000c84
 8003c2c:	20000c6c 	.word	0x20000c6c
 8003c30:	20000794 	.word	0x20000794
 8003c34:	20000790 	.word	0x20000790
 8003c38:	20000c78 	.word	0x20000c78
 8003c3c:	20000c74 	.word	0x20000c74

08003c40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c46:	4b28      	ldr	r3, [pc, #160]	@ (8003ce8 <vTaskSwitchContext+0xa8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c4e:	4b27      	ldr	r3, [pc, #156]	@ (8003cec <vTaskSwitchContext+0xac>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c54:	e042      	b.n	8003cdc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003c56:	4b25      	ldr	r3, [pc, #148]	@ (8003cec <vTaskSwitchContext+0xac>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5c:	4b24      	ldr	r3, [pc, #144]	@ (8003cf0 <vTaskSwitchContext+0xb0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e011      	b.n	8003c88 <vTaskSwitchContext+0x48>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <vTaskSwitchContext+0x42>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	607b      	str	r3, [r7, #4]
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	e7fd      	b.n	8003c7e <vTaskSwitchContext+0x3e>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	491a      	ldr	r1, [pc, #104]	@ (8003cf4 <vTaskSwitchContext+0xb4>)
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0e3      	beq.n	8003c64 <vTaskSwitchContext+0x24>
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4a13      	ldr	r2, [pc, #76]	@ (8003cf4 <vTaskSwitchContext+0xb4>)
 8003ca8:	4413      	add	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d104      	bne.n	8003ccc <vTaskSwitchContext+0x8c>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4a09      	ldr	r2, [pc, #36]	@ (8003cf8 <vTaskSwitchContext+0xb8>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4a06      	ldr	r2, [pc, #24]	@ (8003cf0 <vTaskSwitchContext+0xb0>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6013      	str	r3, [r2, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	20000c8c 	.word	0x20000c8c
 8003cec:	20000c78 	.word	0x20000c78
 8003cf0:	20000c6c 	.word	0x20000c6c
 8003cf4:	20000794 	.word	0x20000794
 8003cf8:	20000790 	.word	0x20000790

08003cfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	60fb      	str	r3, [r7, #12]
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d24:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <vTaskPlaceOnEventList+0x48>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3318      	adds	r3, #24
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7fe fb3e 	bl	80023ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d32:	2101      	movs	r1, #1
 8003d34:	6838      	ldr	r0, [r7, #0]
 8003d36:	f000 fb81 	bl	800443c <prvAddCurrentTaskToDelayedList>
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000790 	.word	0x20000790

08003d48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10b      	bne.n	8003d72 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	617b      	str	r3, [r7, #20]
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <vTaskPlaceOnEventListRestricted+0x54>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3318      	adds	r3, #24
 8003d78:	4619      	mov	r1, r3
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f7fe faf3 	bl	8002366 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	68b8      	ldr	r0, [r7, #8]
 8003d90:	f000 fb54 	bl	800443c <prvAddCurrentTaskToDelayedList>
	}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000790 	.word	0x20000790

08003da0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60fb      	str	r3, [r7, #12]
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	3318      	adds	r3, #24
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe fb24 	bl	8002420 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <xTaskRemoveFromEventList+0xb0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11d      	bne.n	8003e1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fe fb1b 	bl	8002420 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dee:	4b19      	ldr	r3, [pc, #100]	@ (8003e54 <xTaskRemoveFromEventList+0xb4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d903      	bls.n	8003dfe <xTaskRemoveFromEventList+0x5e>
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	4a16      	ldr	r2, [pc, #88]	@ (8003e54 <xTaskRemoveFromEventList+0xb4>)
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4a13      	ldr	r2, [pc, #76]	@ (8003e58 <xTaskRemoveFromEventList+0xb8>)
 8003e0c:	441a      	add	r2, r3
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4619      	mov	r1, r3
 8003e14:	4610      	mov	r0, r2
 8003e16:	f7fe faa6 	bl	8002366 <vListInsertEnd>
 8003e1a:	e005      	b.n	8003e28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3318      	adds	r3, #24
 8003e20:	4619      	mov	r1, r3
 8003e22:	480e      	ldr	r0, [pc, #56]	@ (8003e5c <xTaskRemoveFromEventList+0xbc>)
 8003e24:	f7fe fa9f 	bl	8002366 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <xTaskRemoveFromEventList+0xc0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d905      	bls.n	8003e42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e36:	2301      	movs	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e64 <xTaskRemoveFromEventList+0xc4>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e001      	b.n	8003e46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e46:	697b      	ldr	r3, [r7, #20]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000c8c 	.word	0x20000c8c
 8003e54:	20000c6c 	.word	0x20000c6c
 8003e58:	20000794 	.word	0x20000794
 8003e5c:	20000c24 	.word	0x20000c24
 8003e60:	20000790 	.word	0x20000790
 8003e64:	20000c78 	.word	0x20000c78

08003e68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e70:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <vTaskInternalSetTimeOutState+0x24>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <vTaskInternalSetTimeOutState+0x28>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	605a      	str	r2, [r3, #4]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	20000c7c 	.word	0x20000c7c
 8003e90:	20000c68 	.word	0x20000c68

08003e94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	613b      	str	r3, [r7, #16]
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10b      	bne.n	8003eda <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	60fb      	str	r3, [r7, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	e7fd      	b.n	8003ed6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003eda:	f000 ff8d 	bl	8004df8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ede:	4b1d      	ldr	r3, [pc, #116]	@ (8003f54 <xTaskCheckForTimeOut+0xc0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d102      	bne.n	8003efe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	e023      	b.n	8003f46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <xTaskCheckForTimeOut+0xc4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d007      	beq.n	8003f1a <xTaskCheckForTimeOut+0x86>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d302      	bcc.n	8003f1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f14:	2301      	movs	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	e015      	b.n	8003f46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d20b      	bcs.n	8003f3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad2      	subs	r2, r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff99 	bl	8003e68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	e004      	b.n	8003f46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f46:	f000 ff89 	bl	8004e5c <vPortExitCritical>

	return xReturn;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000c68 	.word	0x20000c68
 8003f58:	20000c7c 	.word	0x20000c7c

08003f5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f60:	4b03      	ldr	r3, [pc, #12]	@ (8003f70 <vTaskMissedYield+0x14>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	20000c78 	.word	0x20000c78

08003f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f7c:	f000 f852 	bl	8004024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <prvIdleTask+0x28>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d9f9      	bls.n	8003f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f88:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <prvIdleTask+0x2c>)
 8003f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f98:	e7f0      	b.n	8003f7c <prvIdleTask+0x8>
 8003f9a:	bf00      	nop
 8003f9c:	20000794 	.word	0x20000794
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	e00c      	b.n	8003fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4a12      	ldr	r2, [pc, #72]	@ (8004004 <prvInitialiseTaskLists+0x60>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe f9a4 	bl	800230c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	607b      	str	r3, [r7, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b37      	cmp	r3, #55	@ 0x37
 8003fce:	d9ef      	bls.n	8003fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fd0:	480d      	ldr	r0, [pc, #52]	@ (8004008 <prvInitialiseTaskLists+0x64>)
 8003fd2:	f7fe f99b 	bl	800230c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fd6:	480d      	ldr	r0, [pc, #52]	@ (800400c <prvInitialiseTaskLists+0x68>)
 8003fd8:	f7fe f998 	bl	800230c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fdc:	480c      	ldr	r0, [pc, #48]	@ (8004010 <prvInitialiseTaskLists+0x6c>)
 8003fde:	f7fe f995 	bl	800230c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fe2:	480c      	ldr	r0, [pc, #48]	@ (8004014 <prvInitialiseTaskLists+0x70>)
 8003fe4:	f7fe f992 	bl	800230c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fe8:	480b      	ldr	r0, [pc, #44]	@ (8004018 <prvInitialiseTaskLists+0x74>)
 8003fea:	f7fe f98f 	bl	800230c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fee:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <prvInitialiseTaskLists+0x78>)
 8003ff0:	4a05      	ldr	r2, [pc, #20]	@ (8004008 <prvInitialiseTaskLists+0x64>)
 8003ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <prvInitialiseTaskLists+0x7c>)
 8003ff6:	4a05      	ldr	r2, [pc, #20]	@ (800400c <prvInitialiseTaskLists+0x68>)
 8003ff8:	601a      	str	r2, [r3, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000794 	.word	0x20000794
 8004008:	20000bf4 	.word	0x20000bf4
 800400c:	20000c08 	.word	0x20000c08
 8004010:	20000c24 	.word	0x20000c24
 8004014:	20000c38 	.word	0x20000c38
 8004018:	20000c50 	.word	0x20000c50
 800401c:	20000c1c 	.word	0x20000c1c
 8004020:	20000c20 	.word	0x20000c20

08004024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800402a:	e019      	b.n	8004060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800402c:	f000 fee4 	bl	8004df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004030:	4b10      	ldr	r3, [pc, #64]	@ (8004074 <prvCheckTasksWaitingTermination+0x50>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f7fe f9ef 	bl	8002420 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004042:	4b0d      	ldr	r3, [pc, #52]	@ (8004078 <prvCheckTasksWaitingTermination+0x54>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3b01      	subs	r3, #1
 8004048:	4a0b      	ldr	r2, [pc, #44]	@ (8004078 <prvCheckTasksWaitingTermination+0x54>)
 800404a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800404c:	4b0b      	ldr	r3, [pc, #44]	@ (800407c <prvCheckTasksWaitingTermination+0x58>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3b01      	subs	r3, #1
 8004052:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <prvCheckTasksWaitingTermination+0x58>)
 8004054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004056:	f000 ff01 	bl	8004e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f810 	bl	8004080 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004060:	4b06      	ldr	r3, [pc, #24]	@ (800407c <prvCheckTasksWaitingTermination+0x58>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e1      	bne.n	800402c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000c38 	.word	0x20000c38
 8004078:	20000c64 	.word	0x20000c64
 800407c:	20000c4c 	.word	0x20000c4c

08004080 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800408e:	2b00      	cmp	r3, #0
 8004090:	d108      	bne.n	80040a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	4618      	mov	r0, r3
 8004098:	f001 f89e 	bl	80051d8 <vPortFree>
				vPortFree( pxTCB );
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f001 f89b 	bl	80051d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040a2:	e019      	b.n	80040d8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d103      	bne.n	80040b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f001 f892 	bl	80051d8 <vPortFree>
	}
 80040b4:	e010      	b.n	80040d8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d00b      	beq.n	80040d8 <prvDeleteTCB+0x58>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
}
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <prvDeleteTCB+0x54>
	}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <prvResetNextTaskUnblockTime+0x38>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <prvResetNextTaskUnblockTime+0x3c>)
 80040f2:	f04f 32ff 	mov.w	r2, #4294967295
 80040f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040f8:	e008      	b.n	800410c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fa:	4b07      	ldr	r3, [pc, #28]	@ (8004118 <prvResetNextTaskUnblockTime+0x38>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a04      	ldr	r2, [pc, #16]	@ (800411c <prvResetNextTaskUnblockTime+0x3c>)
 800410a:	6013      	str	r3, [r2, #0]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	20000c1c 	.word	0x20000c1c
 800411c:	20000c84 	.word	0x20000c84

08004120 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004126:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <xTaskGetSchedulerState+0x34>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800412e:	2301      	movs	r3, #1
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	e008      	b.n	8004146 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004134:	4b08      	ldr	r3, [pc, #32]	@ (8004158 <xTaskGetSchedulerState+0x38>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800413c:	2302      	movs	r3, #2
 800413e:	607b      	str	r3, [r7, #4]
 8004140:	e001      	b.n	8004146 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004146:	687b      	ldr	r3, [r7, #4]
	}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	20000c70 	.word	0x20000c70
 8004158:	20000c8c 	.word	0x20000c8c

0800415c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d051      	beq.n	8004216 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004176:	4b2a      	ldr	r3, [pc, #168]	@ (8004220 <xTaskPriorityInherit+0xc4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	429a      	cmp	r2, r3
 800417e:	d241      	bcs.n	8004204 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	db06      	blt.n	8004196 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004188:	4b25      	ldr	r3, [pc, #148]	@ (8004220 <xTaskPriorityInherit+0xc4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6959      	ldr	r1, [r3, #20]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004224 <xTaskPriorityInherit+0xc8>)
 80041a8:	4413      	add	r3, r2
 80041aa:	4299      	cmp	r1, r3
 80041ac:	d122      	bne.n	80041f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe f934 	bl	8002420 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041b8:	4b19      	ldr	r3, [pc, #100]	@ (8004220 <xTaskPriorityInherit+0xc4>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c6:	4b18      	ldr	r3, [pc, #96]	@ (8004228 <xTaskPriorityInherit+0xcc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d903      	bls.n	80041d6 <xTaskPriorityInherit+0x7a>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	4a15      	ldr	r2, [pc, #84]	@ (8004228 <xTaskPriorityInherit+0xcc>)
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4a10      	ldr	r2, [pc, #64]	@ (8004224 <xTaskPriorityInherit+0xc8>)
 80041e4:	441a      	add	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f7fe f8ba 	bl	8002366 <vListInsertEnd>
 80041f2:	e004      	b.n	80041fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004220 <xTaskPriorityInherit+0xc4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80041fe:	2301      	movs	r3, #1
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e008      	b.n	8004216 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <xTaskPriorityInherit+0xc4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	429a      	cmp	r2, r3
 8004210:	d201      	bcs.n	8004216 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004212:	2301      	movs	r3, #1
 8004214:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004216:	68fb      	ldr	r3, [r7, #12]
	}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000790 	.word	0x20000790
 8004224:	20000794 	.word	0x20000794
 8004228:	20000c6c 	.word	0x20000c6c

0800422c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d058      	beq.n	80042f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004242:	4b2f      	ldr	r3, [pc, #188]	@ (8004300 <xTaskPriorityDisinherit+0xd4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	429a      	cmp	r2, r3
 800424a:	d00b      	beq.n	8004264 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	60fb      	str	r3, [r7, #12]
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60bb      	str	r3, [r7, #8]
}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	e7fd      	b.n	8004280 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004288:	1e5a      	subs	r2, r3, #1
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004296:	429a      	cmp	r2, r3
 8004298:	d02c      	beq.n	80042f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d128      	bne.n	80042f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe f8ba 	bl	8002420 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <xTaskPriorityDisinherit+0xd8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d903      	bls.n	80042d4 <xTaskPriorityDisinherit+0xa8>
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d0:	4a0c      	ldr	r2, [pc, #48]	@ (8004304 <xTaskPriorityDisinherit+0xd8>)
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4a09      	ldr	r2, [pc, #36]	@ (8004308 <xTaskPriorityDisinherit+0xdc>)
 80042e2:	441a      	add	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f7fe f83b 	bl	8002366 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042f0:	2301      	movs	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042f4:	697b      	ldr	r3, [r7, #20]
	}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000790 	.word	0x20000790
 8004304:	20000c6c 	.word	0x20000c6c
 8004308:	20000794 	.word	0x20000794

0800430c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800431a:	2301      	movs	r3, #1
 800431c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d06c      	beq.n	80043fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	60fb      	str	r3, [r7, #12]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d902      	bls.n	8004354 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	e002      	b.n	800435a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004358:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	429a      	cmp	r2, r3
 8004362:	d04c      	beq.n	80043fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	429a      	cmp	r2, r3
 800436c:	d147      	bne.n	80043fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800436e:	4b26      	ldr	r3, [pc, #152]	@ (8004408 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	429a      	cmp	r2, r3
 8004376:	d10b      	bne.n	8004390 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	60bb      	str	r3, [r7, #8]
}
 800438a:	bf00      	nop
 800438c:	bf00      	nop
 800438e:	e7fd      	b.n	800438c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	db04      	blt.n	80043ae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	6959      	ldr	r1, [r3, #20]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4a13      	ldr	r2, [pc, #76]	@ (800440c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80043be:	4413      	add	r3, r2
 80043c0:	4299      	cmp	r1, r3
 80043c2:	d11c      	bne.n	80043fe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe f829 	bl	8002420 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004410 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d903      	bls.n	80043e2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	4a0c      	ldr	r2, [pc, #48]	@ (8004410 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4a07      	ldr	r2, [pc, #28]	@ (800440c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80043f0:	441a      	add	r2, r3
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7fd ffb4 	bl	8002366 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043fe:	bf00      	nop
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000790 	.word	0x20000790
 800440c:	20000794 	.word	0x20000794
 8004410:	20000c6c 	.word	0x20000c6c

08004414 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004418:	4b07      	ldr	r3, [pc, #28]	@ (8004438 <pvTaskIncrementMutexHeldCount+0x24>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <pvTaskIncrementMutexHeldCount+0x24>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004426:	3201      	adds	r2, #1
 8004428:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800442a:	4b03      	ldr	r3, [pc, #12]	@ (8004438 <pvTaskIncrementMutexHeldCount+0x24>)
 800442c:	681b      	ldr	r3, [r3, #0]
	}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20000790 	.word	0x20000790

0800443c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004446:	4b21      	ldr	r3, [pc, #132]	@ (80044cc <prvAddCurrentTaskToDelayedList+0x90>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800444c:	4b20      	ldr	r3, [pc, #128]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3304      	adds	r3, #4
 8004452:	4618      	mov	r0, r3
 8004454:	f7fd ffe4 	bl	8002420 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445e:	d10a      	bne.n	8004476 <prvAddCurrentTaskToDelayedList+0x3a>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004466:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4819      	ldr	r0, [pc, #100]	@ (80044d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004470:	f7fd ff79 	bl	8002366 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004474:	e026      	b.n	80044c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800447e:	4b14      	ldr	r3, [pc, #80]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	429a      	cmp	r2, r3
 800448c:	d209      	bcs.n	80044a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800448e:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b0f      	ldr	r3, [pc, #60]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3304      	adds	r3, #4
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f7fd ff87 	bl	80023ae <vListInsert>
}
 80044a0:	e010      	b.n	80044c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044a2:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b0a      	ldr	r3, [pc, #40]	@ (80044d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f7fd ff7d 	bl	80023ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044b4:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d202      	bcs.n	80044c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80044be:	4a08      	ldr	r2, [pc, #32]	@ (80044e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	20000c68 	.word	0x20000c68
 80044d0:	20000790 	.word	0x20000790
 80044d4:	20000c50 	.word	0x20000c50
 80044d8:	20000c20 	.word	0x20000c20
 80044dc:	20000c1c 	.word	0x20000c1c
 80044e0:	20000c84 	.word	0x20000c84

080044e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	@ 0x28
 80044e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044ee:	f000 fb13 	bl	8004b18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004568 <xTimerCreateTimerTask+0x84>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d021      	beq.n	800453e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004502:	1d3a      	adds	r2, r7, #4
 8004504:	f107 0108 	add.w	r1, r7, #8
 8004508:	f107 030c 	add.w	r3, r7, #12
 800450c:	4618      	mov	r0, r3
 800450e:	f7fd fee3 	bl	80022d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	9202      	str	r2, [sp, #8]
 800451a:	9301      	str	r3, [sp, #4]
 800451c:	2302      	movs	r3, #2
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	2300      	movs	r3, #0
 8004522:	460a      	mov	r2, r1
 8004524:	4911      	ldr	r1, [pc, #68]	@ (800456c <xTimerCreateTimerTask+0x88>)
 8004526:	4812      	ldr	r0, [pc, #72]	@ (8004570 <xTimerCreateTimerTask+0x8c>)
 8004528:	f7fe ffd0 	bl	80034cc <xTaskCreateStatic>
 800452c:	4603      	mov	r3, r0
 800452e:	4a11      	ldr	r2, [pc, #68]	@ (8004574 <xTimerCreateTimerTask+0x90>)
 8004530:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004532:	4b10      	ldr	r3, [pc, #64]	@ (8004574 <xTimerCreateTimerTask+0x90>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800453a:	2301      	movs	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	613b      	str	r3, [r7, #16]
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800455c:	697b      	ldr	r3, [r7, #20]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000cc0 	.word	0x20000cc0
 800456c:	08005504 	.word	0x08005504
 8004570:	080046b1 	.word	0x080046b1
 8004574:	20000cc4 	.word	0x20000cc4

08004578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	@ 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004586:	2300      	movs	r3, #0
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	623b      	str	r3, [r7, #32]
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045a8:	4b19      	ldr	r3, [pc, #100]	@ (8004610 <xTimerGenericCommand+0x98>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d02a      	beq.n	8004606 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b05      	cmp	r3, #5
 80045c0:	dc18      	bgt.n	80045f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045c2:	f7ff fdad 	bl	8004120 <xTaskGetSchedulerState>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d109      	bne.n	80045e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045cc:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <xTimerGenericCommand+0x98>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	f107 0110 	add.w	r1, r7, #16
 80045d4:	2300      	movs	r3, #0
 80045d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d8:	f7fe f900 	bl	80027dc <xQueueGenericSend>
 80045dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80045de:	e012      	b.n	8004606 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <xTimerGenericCommand+0x98>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	f107 0110 	add.w	r1, r7, #16
 80045e8:	2300      	movs	r3, #0
 80045ea:	2200      	movs	r2, #0
 80045ec:	f7fe f8f6 	bl	80027dc <xQueueGenericSend>
 80045f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80045f2:	e008      	b.n	8004606 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <xTimerGenericCommand+0x98>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	f107 0110 	add.w	r1, r7, #16
 80045fc:	2300      	movs	r3, #0
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	f7fe f9ee 	bl	80029e0 <xQueueGenericSendFromISR>
 8004604:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004608:	4618      	mov	r0, r3
 800460a:	3728      	adds	r7, #40	@ 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000cc0 	.word	0x20000cc0

08004614 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af02      	add	r7, sp, #8
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800461e:	4b23      	ldr	r3, [pc, #140]	@ (80046ac <prvProcessExpiredTimer+0x98>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	3304      	adds	r3, #4
 800462c:	4618      	mov	r0, r3
 800462e:	f7fd fef7 	bl	8002420 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d023      	beq.n	8004688 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	699a      	ldr	r2, [r3, #24]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	18d1      	adds	r1, r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	6978      	ldr	r0, [r7, #20]
 800464e:	f000 f8d5 	bl	80047fc <prvInsertTimerInActiveList>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004658:	2300      	movs	r3, #0
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2300      	movs	r3, #0
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	2100      	movs	r1, #0
 8004662:	6978      	ldr	r0, [r7, #20]
 8004664:	f7ff ff88 	bl	8004578 <xTimerGenericCommand>
 8004668:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d114      	bne.n	800469a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60fb      	str	r3, [r7, #12]
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	b2da      	uxtb	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	6978      	ldr	r0, [r7, #20]
 80046a0:	4798      	blx	r3
}
 80046a2:	bf00      	nop
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20000cb8 	.word	0x20000cb8

080046b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046b8:	f107 0308 	add.w	r3, r7, #8
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f859 	bl	8004774 <prvGetNextExpireTime>
 80046c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	4619      	mov	r1, r3
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 f805 	bl	80046d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046ce:	f000 f8d7 	bl	8004880 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046d2:	bf00      	nop
 80046d4:	e7f0      	b.n	80046b8 <prvTimerTask+0x8>
	...

080046d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046e2:	f7ff f937 	bl	8003954 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046e6:	f107 0308 	add.w	r3, r7, #8
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 f866 	bl	80047bc <prvSampleTimeNow>
 80046f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d130      	bne.n	800475a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <prvProcessTimerOrBlockTask+0x3c>
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	429a      	cmp	r2, r3
 8004704:	d806      	bhi.n	8004714 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004706:	f7ff f933 	bl	8003970 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ff81 	bl	8004614 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004712:	e024      	b.n	800475e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800471a:	4b13      	ldr	r3, [pc, #76]	@ (8004768 <prvProcessTimerOrBlockTask+0x90>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <prvProcessTimerOrBlockTask+0x50>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <prvProcessTimerOrBlockTask+0x52>
 8004728:	2300      	movs	r3, #0
 800472a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800472c:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <prvProcessTimerOrBlockTask+0x94>)
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	4619      	mov	r1, r3
 800473a:	f7fe fe93 	bl	8003464 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800473e:	f7ff f917 	bl	8003970 <xTaskResumeAll>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004748:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <prvProcessTimerOrBlockTask+0x98>)
 800474a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	f3bf 8f6f 	isb	sy
}
 8004758:	e001      	b.n	800475e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800475a:	f7ff f909 	bl	8003970 <xTaskResumeAll>
}
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000cbc 	.word	0x20000cbc
 800476c:	20000cc0 	.word	0x20000cc0
 8004770:	e000ed04 	.word	0xe000ed04

08004774 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800477c:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <prvGetNextExpireTime+0x44>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <prvGetNextExpireTime+0x16>
 8004786:	2201      	movs	r2, #1
 8004788:	e000      	b.n	800478c <prvGetNextExpireTime+0x18>
 800478a:	2200      	movs	r2, #0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004798:	4b07      	ldr	r3, [pc, #28]	@ (80047b8 <prvGetNextExpireTime+0x44>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e001      	b.n	80047a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047a8:	68fb      	ldr	r3, [r7, #12]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000cb8 	.word	0x20000cb8

080047bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80047c4:	f7ff f972 	bl	8003aac <xTaskGetTickCount>
 80047c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <prvSampleTimeNow+0x3c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d205      	bcs.n	80047e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047d4:	f000 f93a 	bl	8004a4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e002      	b.n	80047e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047e6:	4a04      	ldr	r2, [pc, #16]	@ (80047f8 <prvSampleTimeNow+0x3c>)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047ec:	68fb      	ldr	r3, [r7, #12]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000cc8 	.word	0x20000cc8

080047fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d812      	bhi.n	8004848 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	1ad2      	subs	r2, r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e01b      	b.n	800486e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004836:	4b10      	ldr	r3, [pc, #64]	@ (8004878 <prvInsertTimerInActiveList+0x7c>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f7fd fdb4 	bl	80023ae <vListInsert>
 8004846:	e012      	b.n	800486e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d206      	bcs.n	800485e <prvInsertTimerInActiveList+0x62>
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d302      	bcc.n	800485e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004858:	2301      	movs	r3, #1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e007      	b.n	800486e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800485e:	4b07      	ldr	r3, [pc, #28]	@ (800487c <prvInsertTimerInActiveList+0x80>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3304      	adds	r3, #4
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f7fd fda0 	bl	80023ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800486e:	697b      	ldr	r3, [r7, #20]
}
 8004870:	4618      	mov	r0, r3
 8004872:	3718      	adds	r7, #24
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20000cbc 	.word	0x20000cbc
 800487c:	20000cb8 	.word	0x20000cb8

08004880 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08e      	sub	sp, #56	@ 0x38
 8004884:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004886:	e0ce      	b.n	8004a26 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	da19      	bge.n	80048c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	3304      	adds	r3, #4
 8004892:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61fb      	str	r3, [r7, #28]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048b8:	6850      	ldr	r0, [r2, #4]
 80048ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048bc:	6892      	ldr	r2, [r2, #8]
 80048be:	4611      	mov	r1, r2
 80048c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f2c0 80ae 	blt.w	8004a26 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	3304      	adds	r3, #4
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd fda0 	bl	8002420 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048e0:	463b      	mov	r3, r7
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff ff6a 	bl	80047bc <prvSampleTimeNow>
 80048e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b09      	cmp	r3, #9
 80048ee:	f200 8097 	bhi.w	8004a20 <prvProcessReceivedCommands+0x1a0>
 80048f2:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <prvProcessReceivedCommands+0x78>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	08004921 	.word	0x08004921
 80048fc:	08004921 	.word	0x08004921
 8004900:	08004921 	.word	0x08004921
 8004904:	08004997 	.word	0x08004997
 8004908:	080049ab 	.word	0x080049ab
 800490c:	080049f7 	.word	0x080049f7
 8004910:	08004921 	.word	0x08004921
 8004914:	08004921 	.word	0x08004921
 8004918:	08004997 	.word	0x08004997
 800491c:	080049ab 	.word	0x080049ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004922:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	18d1      	adds	r1, r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004940:	f7ff ff5c 	bl	80047fc <prvInsertTimerInActiveList>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d06c      	beq.n	8004a24 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800494a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004950:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d061      	beq.n	8004a24 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	441a      	add	r2, r3
 8004968:	2300      	movs	r3, #0
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	2300      	movs	r3, #0
 800496e:	2100      	movs	r1, #0
 8004970:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004972:	f7ff fe01 	bl	8004578 <xTimerGenericCommand>
 8004976:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d152      	bne.n	8004a24 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	61bb      	str	r3, [r7, #24]
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	e7fd      	b.n	8004992 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80049a8:	e03d      	b.n	8004a26 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	617b      	str	r3, [r7, #20]
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	e7fd      	b.n	80049de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	18d1      	adds	r1, r2, r3
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049f0:	f7ff ff04 	bl	80047fc <prvInsertTimerInActiveList>
					break;
 80049f4:	e017      	b.n	8004a26 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d103      	bne.n	8004a0c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004a04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a06:	f000 fbe7 	bl	80051d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a0a:	e00c      	b.n	8004a26 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a1e:	e002      	b.n	8004a26 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004a20:	bf00      	nop
 8004a22:	e000      	b.n	8004a26 <prvProcessReceivedCommands+0x1a6>
					break;
 8004a24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a26:	4b08      	ldr	r3, [pc, #32]	@ (8004a48 <prvProcessReceivedCommands+0x1c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	1d39      	adds	r1, r7, #4
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fe f904 	bl	8002c3c <xQueueReceive>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f47f af26 	bne.w	8004888 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3730      	adds	r7, #48	@ 0x30
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000cc0 	.word	0x20000cc0

08004a4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a52:	e049      	b.n	8004ae8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a54:	4b2e      	ldr	r3, [pc, #184]	@ (8004b10 <prvSwitchTimerLists+0xc4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004b10 <prvSwitchTimerLists+0xc4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fd fcd7 	bl	8002420 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02f      	beq.n	8004ae8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d90e      	bls.n	8004ab8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b10 <prvSwitchTimerLists+0xc4>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fd fc7c 	bl	80023ae <vListInsert>
 8004ab6:	e017      	b.n	8004ae8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fd58 	bl	8004578 <xTimerGenericCommand>
 8004ac8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	603b      	str	r3, [r7, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ae8:	4b09      	ldr	r3, [pc, #36]	@ (8004b10 <prvSwitchTimerLists+0xc4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1b0      	bne.n	8004a54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004af2:	4b07      	ldr	r3, [pc, #28]	@ (8004b10 <prvSwitchTimerLists+0xc4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004af8:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <prvSwitchTimerLists+0xc8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a04      	ldr	r2, [pc, #16]	@ (8004b10 <prvSwitchTimerLists+0xc4>)
 8004afe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b00:	4a04      	ldr	r2, [pc, #16]	@ (8004b14 <prvSwitchTimerLists+0xc8>)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6013      	str	r3, [r2, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000cb8 	.word	0x20000cb8
 8004b14:	20000cbc 	.word	0x20000cbc

08004b18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b1e:	f000 f96b 	bl	8004df8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b22:	4b15      	ldr	r3, [pc, #84]	@ (8004b78 <prvCheckForValidListAndQueue+0x60>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d120      	bne.n	8004b6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b2a:	4814      	ldr	r0, [pc, #80]	@ (8004b7c <prvCheckForValidListAndQueue+0x64>)
 8004b2c:	f7fd fbee 	bl	800230c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b30:	4813      	ldr	r0, [pc, #76]	@ (8004b80 <prvCheckForValidListAndQueue+0x68>)
 8004b32:	f7fd fbeb 	bl	800230c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b36:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <prvCheckForValidListAndQueue+0x6c>)
 8004b38:	4a10      	ldr	r2, [pc, #64]	@ (8004b7c <prvCheckForValidListAndQueue+0x64>)
 8004b3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	@ (8004b88 <prvCheckForValidListAndQueue+0x70>)
 8004b3e:	4a10      	ldr	r2, [pc, #64]	@ (8004b80 <prvCheckForValidListAndQueue+0x68>)
 8004b40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b42:	2300      	movs	r3, #0
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <prvCheckForValidListAndQueue+0x74>)
 8004b48:	4a11      	ldr	r2, [pc, #68]	@ (8004b90 <prvCheckForValidListAndQueue+0x78>)
 8004b4a:	2110      	movs	r1, #16
 8004b4c:	200a      	movs	r0, #10
 8004b4e:	f7fd fcfb 	bl	8002548 <xQueueGenericCreateStatic>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4a08      	ldr	r2, [pc, #32]	@ (8004b78 <prvCheckForValidListAndQueue+0x60>)
 8004b56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b58:	4b07      	ldr	r3, [pc, #28]	@ (8004b78 <prvCheckForValidListAndQueue+0x60>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b60:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <prvCheckForValidListAndQueue+0x60>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	490b      	ldr	r1, [pc, #44]	@ (8004b94 <prvCheckForValidListAndQueue+0x7c>)
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fc28 	bl	80033bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b6c:	f000 f976 	bl	8004e5c <vPortExitCritical>
}
 8004b70:	bf00      	nop
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000cc0 	.word	0x20000cc0
 8004b7c:	20000c90 	.word	0x20000c90
 8004b80:	20000ca4 	.word	0x20000ca4
 8004b84:	20000cb8 	.word	0x20000cb8
 8004b88:	20000cbc 	.word	0x20000cbc
 8004b8c:	20000d6c 	.word	0x20000d6c
 8004b90:	20000ccc 	.word	0x20000ccc
 8004b94:	0800550c 	.word	0x0800550c

08004b98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3b04      	subs	r3, #4
 8004ba8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b04      	subs	r3, #4
 8004bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f023 0201 	bic.w	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3b04      	subs	r3, #4
 8004bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8004bfc <pxPortInitialiseStack+0x64>)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3b14      	subs	r3, #20
 8004bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3b04      	subs	r3, #4
 8004bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f06f 0202 	mvn.w	r2, #2
 8004be6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3b20      	subs	r3, #32
 8004bec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bee:	68fb      	ldr	r3, [r7, #12]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	08004c01 	.word	0x08004c01

08004c00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c0a:	4b13      	ldr	r3, [pc, #76]	@ (8004c58 <prvTaskExitError+0x58>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d00b      	beq.n	8004c2c <prvTaskExitError+0x2c>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	60fb      	str	r3, [r7, #12]
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	e7fd      	b.n	8004c28 <prvTaskExitError+0x28>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	60bb      	str	r3, [r7, #8]
}
 8004c3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c40:	bf00      	nop
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0fc      	beq.n	8004c42 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000010 	.word	0x20000010
 8004c5c:	00000000 	.word	0x00000000

08004c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c60:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <pxCurrentTCBConst2>)
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	6808      	ldr	r0, [r1, #0]
 8004c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6a:	f380 8809 	msr	PSP, r0
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8811 	msr	BASEPRI, r0
 8004c7a:	4770      	bx	lr
 8004c7c:	f3af 8000 	nop.w

08004c80 <pxCurrentTCBConst2>:
 8004c80:	20000790 	.word	0x20000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop

08004c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c88:	4808      	ldr	r0, [pc, #32]	@ (8004cac <prvPortStartFirstTask+0x24>)
 8004c8a:	6800      	ldr	r0, [r0, #0]
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f380 8808 	msr	MSP, r0
 8004c92:	f04f 0000 	mov.w	r0, #0
 8004c96:	f380 8814 	msr	CONTROL, r0
 8004c9a:	b662      	cpsie	i
 8004c9c:	b661      	cpsie	f
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	df00      	svc	0
 8004ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004caa:	bf00      	nop
 8004cac:	e000ed08 	.word	0xe000ed08

08004cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cb6:	4b47      	ldr	r3, [pc, #284]	@ (8004dd4 <xPortStartScheduler+0x124>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a47      	ldr	r2, [pc, #284]	@ (8004dd8 <xPortStartScheduler+0x128>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10b      	bne.n	8004cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	613b      	str	r3, [r7, #16]
}
 8004cd2:	bf00      	nop
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8004dd4 <xPortStartScheduler+0x124>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8004ddc <xPortStartScheduler+0x12c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10b      	bne.n	8004cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	60fb      	str	r3, [r7, #12]
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	e7fd      	b.n	8004cf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cfa:	4b39      	ldr	r3, [pc, #228]	@ (8004de0 <xPortStartScheduler+0x130>)
 8004cfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	22ff      	movs	r2, #255	@ 0xff
 8004d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4b31      	ldr	r3, [pc, #196]	@ (8004de4 <xPortStartScheduler+0x134>)
 8004d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d22:	4b31      	ldr	r3, [pc, #196]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d24:	2207      	movs	r2, #7
 8004d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d28:	e009      	b.n	8004d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	4a2d      	ldr	r2, [pc, #180]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	2b80      	cmp	r3, #128	@ 0x80
 8004d48:	d0ef      	beq.n	8004d2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d4a:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f1c3 0307 	rsb	r3, r3, #7
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d00b      	beq.n	8004d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	60bb      	str	r3, [r7, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	bf00      	nop
 8004d6c:	e7fd      	b.n	8004d6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	4a1c      	ldr	r2, [pc, #112]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d78:	4b1b      	ldr	r3, [pc, #108]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <xPortStartScheduler+0x138>)
 8004d82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d8c:	4b17      	ldr	r3, [pc, #92]	@ (8004dec <xPortStartScheduler+0x13c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a16      	ldr	r2, [pc, #88]	@ (8004dec <xPortStartScheduler+0x13c>)
 8004d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d98:	4b14      	ldr	r3, [pc, #80]	@ (8004dec <xPortStartScheduler+0x13c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a13      	ldr	r2, [pc, #76]	@ (8004dec <xPortStartScheduler+0x13c>)
 8004d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004da2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004da4:	f000 f8da 	bl	8004f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004da8:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <xPortStartScheduler+0x140>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dae:	f000 f8f9 	bl	8004fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <xPortStartScheduler+0x144>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a0f      	ldr	r2, [pc, #60]	@ (8004df4 <xPortStartScheduler+0x144>)
 8004db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004dbe:	f7ff ff63 	bl	8004c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dc2:	f7fe ff3d 	bl	8003c40 <vTaskSwitchContext>
	prvTaskExitError();
 8004dc6:	f7ff ff1b 	bl	8004c00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	e000ed00 	.word	0xe000ed00
 8004dd8:	410fc271 	.word	0x410fc271
 8004ddc:	410fc270 	.word	0x410fc270
 8004de0:	e000e400 	.word	0xe000e400
 8004de4:	20000dbc 	.word	0x20000dbc
 8004de8:	20000dc0 	.word	0x20000dc0
 8004dec:	e000ed20 	.word	0xe000ed20
 8004df0:	20000010 	.word	0x20000010
 8004df4:	e000ef34 	.word	0xe000ef34

08004df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <vPortEnterCritical+0x5c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3301      	adds	r3, #1
 8004e18:	4a0e      	ldr	r2, [pc, #56]	@ (8004e54 <vPortEnterCritical+0x5c>)
 8004e1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e54 <vPortEnterCritical+0x5c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d110      	bne.n	8004e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e24:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <vPortEnterCritical+0x60>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	603b      	str	r3, [r7, #0]
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <vPortEnterCritical+0x4a>
	}
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000010 	.word	0x20000010
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e62:	4b12      	ldr	r3, [pc, #72]	@ (8004eac <vPortExitCritical+0x50>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <vPortExitCritical+0x26>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	607b      	str	r3, [r7, #4]
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e82:	4b0a      	ldr	r3, [pc, #40]	@ (8004eac <vPortExitCritical+0x50>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	4a08      	ldr	r2, [pc, #32]	@ (8004eac <vPortExitCritical+0x50>)
 8004e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e8c:	4b07      	ldr	r3, [pc, #28]	@ (8004eac <vPortExitCritical+0x50>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d105      	bne.n	8004ea0 <vPortExitCritical+0x44>
 8004e94:	2300      	movs	r3, #0
 8004e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f383 8811 	msr	BASEPRI, r3
}
 8004e9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	20000010 	.word	0x20000010

08004eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004eb0:	f3ef 8009 	mrs	r0, PSP
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <pxCurrentTCBConst>)
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	f01e 0f10 	tst.w	lr, #16
 8004ec0:	bf08      	it	eq
 8004ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eca:	6010      	str	r0, [r2, #0]
 8004ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ed4:	f380 8811 	msr	BASEPRI, r0
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f7fe feae 	bl	8003c40 <vTaskSwitchContext>
 8004ee4:	f04f 0000 	mov.w	r0, #0
 8004ee8:	f380 8811 	msr	BASEPRI, r0
 8004eec:	bc09      	pop	{r0, r3}
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	6808      	ldr	r0, [r1, #0]
 8004ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef6:	f01e 0f10 	tst.w	lr, #16
 8004efa:	bf08      	it	eq
 8004efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f00:	f380 8809 	msr	PSP, r0
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst>:
 8004f10:	20000790 	.word	0x20000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	607b      	str	r3, [r7, #4]
}
 8004f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f32:	f7fe fdcb 	bl	8003acc <xTaskIncrementTick>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f3c:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <xPortSysTickHandler+0x40>)
 8004f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	2300      	movs	r3, #0
 8004f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	f383 8811 	msr	BASEPRI, r3
}
 8004f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	e000ed04 	.word	0xe000ed04

08004f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f60:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <vPortSetupTimerInterrupt+0x34>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f66:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <vPortSetupTimerInterrupt+0x38>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <vPortSetupTimerInterrupt+0x3c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <vPortSetupTimerInterrupt+0x40>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	4a09      	ldr	r2, [pc, #36]	@ (8004fa0 <vPortSetupTimerInterrupt+0x44>)
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f7e:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <vPortSetupTimerInterrupt+0x34>)
 8004f80:	2207      	movs	r2, #7
 8004f82:	601a      	str	r2, [r3, #0]
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	e000e010 	.word	0xe000e010
 8004f94:	e000e018 	.word	0xe000e018
 8004f98:	20000004 	.word	0x20000004
 8004f9c:	10624dd3 	.word	0x10624dd3
 8004fa0:	e000e014 	.word	0xe000e014

08004fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004fb4 <vPortEnableVFP+0x10>
 8004fa8:	6801      	ldr	r1, [r0, #0]
 8004faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004fae:	6001      	str	r1, [r0, #0]
 8004fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fb2:	bf00      	nop
 8004fb4:	e000ed88 	.word	0xe000ed88

08004fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fbe:	f3ef 8305 	mrs	r3, IPSR
 8004fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b0f      	cmp	r3, #15
 8004fc8:	d915      	bls.n	8004ff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fca:	4a18      	ldr	r2, [pc, #96]	@ (800502c <vPortValidateInterruptPriority+0x74>)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fd4:	4b16      	ldr	r3, [pc, #88]	@ (8005030 <vPortValidateInterruptPriority+0x78>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	7afa      	ldrb	r2, [r7, #11]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d20b      	bcs.n	8004ff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <vPortValidateInterruptPriority+0x7c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8005038 <vPortValidateInterruptPriority+0x80>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d90b      	bls.n	800501e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	603b      	str	r3, [r7, #0]
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	e7fd      	b.n	800501a <vPortValidateInterruptPriority+0x62>
	}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	e000e3f0 	.word	0xe000e3f0
 8005030:	20000dbc 	.word	0x20000dbc
 8005034:	e000ed0c 	.word	0xe000ed0c
 8005038:	20000dc0 	.word	0x20000dc0

0800503c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	@ 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005048:	f7fe fc84 	bl	8003954 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800504c:	4b5c      	ldr	r3, [pc, #368]	@ (80051c0 <pvPortMalloc+0x184>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005054:	f000 f924 	bl	80052a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005058:	4b5a      	ldr	r3, [pc, #360]	@ (80051c4 <pvPortMalloc+0x188>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4013      	ands	r3, r2
 8005060:	2b00      	cmp	r3, #0
 8005062:	f040 8095 	bne.w	8005190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01e      	beq.n	80050aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800506c:	2208      	movs	r2, #8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4413      	add	r3, r2
 8005072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b00      	cmp	r3, #0
 800507c:	d015      	beq.n	80050aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f023 0307 	bic.w	r3, r3, #7
 8005084:	3308      	adds	r3, #8
 8005086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <pvPortMalloc+0x6e>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	617b      	str	r3, [r7, #20]
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	e7fd      	b.n	80050a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d06f      	beq.n	8005190 <pvPortMalloc+0x154>
 80050b0:	4b45      	ldr	r3, [pc, #276]	@ (80051c8 <pvPortMalloc+0x18c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d86a      	bhi.n	8005190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050ba:	4b44      	ldr	r3, [pc, #272]	@ (80051cc <pvPortMalloc+0x190>)
 80050bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050be:	4b43      	ldr	r3, [pc, #268]	@ (80051cc <pvPortMalloc+0x190>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050c4:	e004      	b.n	80050d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d903      	bls.n	80050e2 <pvPortMalloc+0xa6>
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f1      	bne.n	80050c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050e2:	4b37      	ldr	r3, [pc, #220]	@ (80051c0 <pvPortMalloc+0x184>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d051      	beq.n	8005190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2208      	movs	r2, #8
 80050f2:	4413      	add	r3, r2
 80050f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	1ad2      	subs	r2, r2, r3
 8005106:	2308      	movs	r3, #8
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	429a      	cmp	r2, r3
 800510c:	d920      	bls.n	8005150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800510e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4413      	add	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <pvPortMalloc+0xfc>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
}
 8005132:	bf00      	nop
 8005134:	bf00      	nop
 8005136:	e7fd      	b.n	8005134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800514a:	69b8      	ldr	r0, [r7, #24]
 800514c:	f000 f90a 	bl	8005364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005150:	4b1d      	ldr	r3, [pc, #116]	@ (80051c8 <pvPortMalloc+0x18c>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	4a1b      	ldr	r2, [pc, #108]	@ (80051c8 <pvPortMalloc+0x18c>)
 800515c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800515e:	4b1a      	ldr	r3, [pc, #104]	@ (80051c8 <pvPortMalloc+0x18c>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	4b1b      	ldr	r3, [pc, #108]	@ (80051d0 <pvPortMalloc+0x194>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d203      	bcs.n	8005172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800516a:	4b17      	ldr	r3, [pc, #92]	@ (80051c8 <pvPortMalloc+0x18c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a18      	ldr	r2, [pc, #96]	@ (80051d0 <pvPortMalloc+0x194>)
 8005170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <pvPortMalloc+0x188>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	431a      	orrs	r2, r3
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005186:	4b13      	ldr	r3, [pc, #76]	@ (80051d4 <pvPortMalloc+0x198>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3301      	adds	r3, #1
 800518c:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <pvPortMalloc+0x198>)
 800518e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005190:	f7fe fbee 	bl	8003970 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <pvPortMalloc+0x17a>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60fb      	str	r3, [r7, #12]
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	e7fd      	b.n	80051b2 <pvPortMalloc+0x176>
	return pvReturn;
 80051b6:	69fb      	ldr	r3, [r7, #28]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3728      	adds	r7, #40	@ 0x28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20001bdc 	.word	0x20001bdc
 80051c4:	20001bf0 	.word	0x20001bf0
 80051c8:	20001be0 	.word	0x20001be0
 80051cc:	20001bd4 	.word	0x20001bd4
 80051d0:	20001be4 	.word	0x20001be4
 80051d4:	20001be8 	.word	0x20001be8

080051d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04f      	beq.n	800528a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051ea:	2308      	movs	r3, #8
 80051ec:	425b      	negs	r3, r3
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4413      	add	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	4b25      	ldr	r3, [pc, #148]	@ (8005294 <vPortFree+0xbc>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4013      	ands	r3, r2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10b      	bne.n	800521e <vPortFree+0x46>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	60fb      	str	r3, [r7, #12]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <vPortFree+0x66>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60bb      	str	r3, [r7, #8]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	4b14      	ldr	r3, [pc, #80]	@ (8005294 <vPortFree+0xbc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01e      	beq.n	800528a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d11a      	bne.n	800528a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <vPortFree+0xbc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	43db      	mvns	r3, r3
 800525e:	401a      	ands	r2, r3
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005264:	f7fe fb76 	bl	8003954 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <vPortFree+0xc0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4413      	add	r3, r2
 8005272:	4a09      	ldr	r2, [pc, #36]	@ (8005298 <vPortFree+0xc0>)
 8005274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005276:	6938      	ldr	r0, [r7, #16]
 8005278:	f000 f874 	bl	8005364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800527c:	4b07      	ldr	r3, [pc, #28]	@ (800529c <vPortFree+0xc4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	4a06      	ldr	r2, [pc, #24]	@ (800529c <vPortFree+0xc4>)
 8005284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005286:	f7fe fb73 	bl	8003970 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800528a:	bf00      	nop
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20001bf0 	.word	0x20001bf0
 8005298:	20001be0 	.word	0x20001be0
 800529c:	20001bec 	.word	0x20001bec

080052a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052a6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80052aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052ac:	4b27      	ldr	r3, [pc, #156]	@ (800534c <prvHeapInit+0xac>)
 80052ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3307      	adds	r3, #7
 80052be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0307 	bic.w	r3, r3, #7
 80052c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	4a1f      	ldr	r2, [pc, #124]	@ (800534c <prvHeapInit+0xac>)
 80052d0:	4413      	add	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005350 <prvHeapInit+0xb0>)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052de:	4b1c      	ldr	r3, [pc, #112]	@ (8005350 <prvHeapInit+0xb0>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	4413      	add	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052ec:	2208      	movs	r2, #8
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0307 	bic.w	r3, r3, #7
 80052fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a15      	ldr	r2, [pc, #84]	@ (8005354 <prvHeapInit+0xb4>)
 8005300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005302:	4b14      	ldr	r3, [pc, #80]	@ (8005354 <prvHeapInit+0xb4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800530a:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <prvHeapInit+0xb4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2200      	movs	r2, #0
 8005310:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	1ad2      	subs	r2, r2, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005320:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <prvHeapInit+0xb4>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a0a      	ldr	r2, [pc, #40]	@ (8005358 <prvHeapInit+0xb8>)
 800532e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a09      	ldr	r2, [pc, #36]	@ (800535c <prvHeapInit+0xbc>)
 8005336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005338:	4b09      	ldr	r3, [pc, #36]	@ (8005360 <prvHeapInit+0xc0>)
 800533a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800533e:	601a      	str	r2, [r3, #0]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	20000dc4 	.word	0x20000dc4
 8005350:	20001bd4 	.word	0x20001bd4
 8005354:	20001bdc 	.word	0x20001bdc
 8005358:	20001be4 	.word	0x20001be4
 800535c:	20001be0 	.word	0x20001be0
 8005360:	20001bf0 	.word	0x20001bf0

08005364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800536c:	4b28      	ldr	r3, [pc, #160]	@ (8005410 <prvInsertBlockIntoFreeList+0xac>)
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e002      	b.n	8005378 <prvInsertBlockIntoFreeList+0x14>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	429a      	cmp	r2, r3
 8005380:	d8f7      	bhi.n	8005372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4413      	add	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d108      	bne.n	80053a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	441a      	add	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	441a      	add	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d118      	bne.n	80053ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b15      	ldr	r3, [pc, #84]	@ (8005414 <prvInsertBlockIntoFreeList+0xb0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d00d      	beq.n	80053e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	441a      	add	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e008      	b.n	80053f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <prvInsertBlockIntoFreeList+0xb0>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e003      	b.n	80053f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d002      	beq.n	8005402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20001bd4 	.word	0x20001bd4
 8005414:	20001bdc 	.word	0x20001bdc

08005418 <memset>:
 8005418:	4402      	add	r2, r0
 800541a:	4603      	mov	r3, r0
 800541c:	4293      	cmp	r3, r2
 800541e:	d100      	bne.n	8005422 <memset+0xa>
 8005420:	4770      	bx	lr
 8005422:	f803 1b01 	strb.w	r1, [r3], #1
 8005426:	e7f9      	b.n	800541c <memset+0x4>

08005428 <__libc_init_array>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	4d0d      	ldr	r5, [pc, #52]	@ (8005460 <__libc_init_array+0x38>)
 800542c:	4c0d      	ldr	r4, [pc, #52]	@ (8005464 <__libc_init_array+0x3c>)
 800542e:	1b64      	subs	r4, r4, r5
 8005430:	10a4      	asrs	r4, r4, #2
 8005432:	2600      	movs	r6, #0
 8005434:	42a6      	cmp	r6, r4
 8005436:	d109      	bne.n	800544c <__libc_init_array+0x24>
 8005438:	4d0b      	ldr	r5, [pc, #44]	@ (8005468 <__libc_init_array+0x40>)
 800543a:	4c0c      	ldr	r4, [pc, #48]	@ (800546c <__libc_init_array+0x44>)
 800543c:	f000 f826 	bl	800548c <_init>
 8005440:	1b64      	subs	r4, r4, r5
 8005442:	10a4      	asrs	r4, r4, #2
 8005444:	2600      	movs	r6, #0
 8005446:	42a6      	cmp	r6, r4
 8005448:	d105      	bne.n	8005456 <__libc_init_array+0x2e>
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005450:	4798      	blx	r3
 8005452:	3601      	adds	r6, #1
 8005454:	e7ee      	b.n	8005434 <__libc_init_array+0xc>
 8005456:	f855 3b04 	ldr.w	r3, [r5], #4
 800545a:	4798      	blx	r3
 800545c:	3601      	adds	r6, #1
 800545e:	e7f2      	b.n	8005446 <__libc_init_array+0x1e>
 8005460:	080055d4 	.word	0x080055d4
 8005464:	080055d4 	.word	0x080055d4
 8005468:	080055d4 	.word	0x080055d4
 800546c:	080055d8 	.word	0x080055d8

08005470 <memcpy>:
 8005470:	440a      	add	r2, r1
 8005472:	4291      	cmp	r1, r2
 8005474:	f100 33ff 	add.w	r3, r0, #4294967295
 8005478:	d100      	bne.n	800547c <memcpy+0xc>
 800547a:	4770      	bx	lr
 800547c:	b510      	push	{r4, lr}
 800547e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005486:	4291      	cmp	r1, r2
 8005488:	d1f9      	bne.n	800547e <memcpy+0xe>
 800548a:	bd10      	pop	{r4, pc}

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
